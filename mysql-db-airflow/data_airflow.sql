use data_airflow;
-- MySQL dump 10.13  Distrib 5.7.33, for Linux (x86_64)
--
-- Host: localhost    Database: data_airflow
-- ------------------------------------------------------
-- Server version	5.7.33

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `ab_permission`
--

DROP TABLE IF EXISTS `ab_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ab_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ab_permission`
--

LOCK TABLES `ab_permission` WRITE;
/*!40000 ALTER TABLE `ab_permission` DISABLE KEYS */;
INSERT INTO `ab_permission` VALUES (4,'can_create'),(3,'can_delete'),(2,'can_edit'),(1,'can_read'),(8,'can_this_form_get'),(10,'can_this_form_post'),(7,'can_userinfo'),(6,'menu_access'),(5,'resetmypassword'),(9,'userinfoedit');
/*!40000 ALTER TABLE `ab_permission` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ab_permission_view`
--

DROP TABLE IF EXISTS `ab_permission_view`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ab_permission_view` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `permission_id` int(11) DEFAULT NULL,
  `view_menu_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `permission_id` (`permission_id`,`view_menu_id`),
  KEY `view_menu_id` (`view_menu_id`),
  CONSTRAINT `ab_permission_view_ibfk_1` FOREIGN KEY (`permission_id`) REFERENCES `ab_permission` (`id`),
  CONSTRAINT `ab_permission_view_ibfk_2` FOREIGN KEY (`view_menu_id`) REFERENCES `ab_view_menu` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=64 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ab_permission_view`
--

LOCK TABLES `ab_permission_view` WRITE;
/*!40000 ALTER TABLE `ab_permission_view` DISABLE KEYS */;
INSERT INTO `ab_permission_view` VALUES (2,1,1),(62,1,2),(7,1,3),(8,1,4),(12,1,5),(13,1,6),(15,1,7),(19,1,8),(22,1,9),(23,1,10),(24,1,11),(25,1,12),(38,1,14),(35,1,18),(45,1,21),(48,1,24),(60,1,28),(3,2,1),(63,2,2),(52,2,3),(9,2,4),(16,2,7),(20,2,8),(1,3,1),(50,3,2),(10,3,3),(53,3,4),(14,3,7),(18,3,8),(55,3,9),(4,4,1),(11,4,3),(51,4,4),(17,4,7),(21,4,8),(26,5,13),(54,6,1),(43,6,3),(31,6,4),(28,6,5),(56,6,7),(57,6,8),(59,6,9),(27,6,14),(41,6,21),(44,6,23),(46,6,24),(47,6,25),(49,6,26),(58,6,27),(61,6,28),(33,7,13),(29,7,15),(39,7,19),(40,7,20),(42,7,22),(30,8,16),(32,8,17),(34,9,13),(37,10,16),(36,10,17);
/*!40000 ALTER TABLE `ab_permission_view` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ab_permission_view_role`
--

DROP TABLE IF EXISTS `ab_permission_view_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ab_permission_view_role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `permission_view_id` int(11) DEFAULT NULL,
  `role_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `permission_view_id` (`permission_view_id`,`role_id`),
  KEY `role_id` (`role_id`),
  CONSTRAINT `ab_permission_view_role_ibfk_1` FOREIGN KEY (`permission_view_id`) REFERENCES `ab_permission_view` (`id`),
  CONSTRAINT `ab_permission_view_role_ibfk_2` FOREIGN KEY (`role_id`) REFERENCES `ab_role` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=200 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ab_permission_view_role`
--

LOCK TABLES `ab_permission_view_role` WRITE;
/*!40000 ALTER TABLE `ab_permission_view_role` DISABLE KEYS */;
INSERT INTO `ab_permission_view_role` VALUES (186,1,1),(125,1,5),(167,2,1),(107,2,5),(173,3,1),(112,3,5),(165,4,1),(105,4,5),(178,7,1),(23,7,3),(62,7,4),(117,7,5),(132,8,1),(1,8,3),(33,8,4),(73,8,5),(141,9,1),(40,9,4),(82,9,5),(139,10,1),(38,10,4),(80,10,5),(150,11,1),(47,11,4),(91,11,5),(136,12,1),(4,12,3),(36,12,4),(77,12,5),(175,13,1),(20,13,3),(59,13,4),(114,13,5),(192,14,1),(131,14,5),(160,15,1),(101,15,5),(153,16,1),(94,16,5),(191,17,1),(130,17,5),(159,18,1),(100,18,5),(187,19,1),(126,19,5),(145,20,1),(86,20,5),(155,21,1),(96,21,5),(156,22,1),(13,22,3),(49,22,4),(97,22,5),(146,23,1),(8,23,3),(43,23,4),(87,23,5),(152,24,1),(93,24,5),(133,25,1),(2,25,3),(34,25,4),(74,25,5),(134,26,1),(3,26,3),(35,26,4),(75,26,5),(140,27,1),(5,27,3),(39,27,4),(81,27,5),(142,28,1),(6,28,3),(41,28,4),(83,28,5),(144,29,1),(7,29,3),(42,29,4),(85,29,5),(147,30,1),(9,30,3),(44,30,4),(88,30,5),(148,31,1),(10,31,3),(45,31,4),(89,31,5),(149,32,1),(11,32,3),(46,32,4),(90,32,5),(151,33,1),(12,33,3),(48,33,4),(92,33,5),(157,34,1),(14,34,3),(50,34,4),(98,34,5),(158,35,1),(15,35,3),(51,35,4),(99,35,5),(164,36,1),(16,36,3),(54,36,4),(104,36,5),(168,37,1),(17,37,3),(56,37,4),(108,37,5),(170,38,1),(18,38,3),(57,38,4),(109,38,5),(171,39,1),(19,39,3),(58,39,4),(110,39,5),(176,40,1),(21,40,3),(60,40,4),(115,40,5),(179,41,1),(24,41,3),(63,41,4),(118,41,5),(180,42,1),(25,42,3),(64,42,4),(119,42,5),(181,43,1),(26,43,3),(65,43,4),(120,43,5),(182,44,1),(27,44,3),(66,44,4),(121,44,5),(183,45,1),(28,45,3),(67,45,4),(122,45,5),(184,46,1),(29,46,3),(68,46,4),(123,46,5),(185,47,1),(30,47,3),(69,47,4),(124,47,5),(188,48,1),(31,48,3),(70,48,4),(127,48,5),(189,49,1),(32,49,3),(71,49,4),(128,49,5),(138,50,1),(37,50,4),(79,50,5),(162,51,1),(52,51,4),(102,51,5),(163,52,1),(53,52,4),(103,52,5),(166,53,1),(55,53,4),(106,53,5),(135,54,1),(76,54,5),(137,55,1),(78,55,5),(143,56,1),(84,56,5),(154,57,1),(95,57,5),(172,58,1),(111,58,5),(174,59,1),(113,59,5),(161,60,1),(169,61,1),(198,62,1),(193,62,3),(194,62,4),(196,62,5),(199,63,1),(195,63,4),(197,63,5);
/*!40000 ALTER TABLE `ab_permission_view_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ab_register_user`
--

DROP TABLE IF EXISTS `ab_register_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ab_register_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `first_name` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `last_name` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `username` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(256) COLLATE utf8_unicode_ci DEFAULT NULL,
  `email` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `registration_date` datetime DEFAULT NULL,
  `registration_hash` varchar(256) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ab_register_user`
--

LOCK TABLES `ab_register_user` WRITE;
/*!40000 ALTER TABLE `ab_register_user` DISABLE KEYS */;
/*!40000 ALTER TABLE `ab_register_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ab_role`
--

DROP TABLE IF EXISTS `ab_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ab_role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ab_role`
--

LOCK TABLES `ab_role` WRITE;
/*!40000 ALTER TABLE `ab_role` DISABLE KEYS */;
INSERT INTO `ab_role` VALUES (1,'Admin'),(5,'Op'),(2,'Public'),(4,'User'),(3,'Viewer');
/*!40000 ALTER TABLE `ab_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ab_user`
--

DROP TABLE IF EXISTS `ab_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ab_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `first_name` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `last_name` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `username` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `password` varchar(256) COLLATE utf8_unicode_ci DEFAULT NULL,
  `active` tinyint(1) DEFAULT NULL,
  `email` varchar(64) COLLATE utf8_unicode_ci NOT NULL,
  `last_login` datetime DEFAULT NULL,
  `login_count` int(11) DEFAULT NULL,
  `fail_login_count` int(11) DEFAULT NULL,
  `created_on` datetime DEFAULT NULL,
  `changed_on` datetime DEFAULT NULL,
  `created_by_fk` int(11) DEFAULT NULL,
  `changed_by_fk` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`),
  UNIQUE KEY `username` (`username`),
  KEY `changed_by_fk` (`changed_by_fk`),
  KEY `created_by_fk` (`created_by_fk`),
  CONSTRAINT `ab_user_ibfk_1` FOREIGN KEY (`changed_by_fk`) REFERENCES `ab_user` (`id`),
  CONSTRAINT `ab_user_ibfk_2` FOREIGN KEY (`created_by_fk`) REFERENCES `ab_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ab_user`
--

LOCK TABLES `ab_user` WRITE;
/*!40000 ALTER TABLE `ab_user` DISABLE KEYS */;
/*!40000 ALTER TABLE `ab_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ab_user_role`
--

DROP TABLE IF EXISTS `ab_user_role`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ab_user_role` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT NULL,
  `role_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`role_id`),
  KEY `role_id` (`role_id`),
  CONSTRAINT `ab_user_role_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `ab_role` (`id`),
  CONSTRAINT `ab_user_role_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `ab_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ab_user_role`
--

LOCK TABLES `ab_user_role` WRITE;
/*!40000 ALTER TABLE `ab_user_role` DISABLE KEYS */;
/*!40000 ALTER TABLE `ab_user_role` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ab_view_menu`
--

DROP TABLE IF EXISTS `ab_view_menu`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ab_view_menu` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ab_view_menu`
--

LOCK TABLES `ab_view_menu` WRITE;
/*!40000 ALTER TABLE `ab_view_menu` DISABLE KEYS */;
INSERT INTO `ab_view_menu` VALUES (27,'Admin'),(5,'Audit Logs'),(25,'Browse'),(11,'Configurations'),(1,'Connections'),(10,'DAG Code'),(3,'DAG Runs'),(2,'DAGs'),(23,'Docs'),(26,'Documentation'),(6,'ImportError'),(14,'Jobs'),(21,'Plugins'),(7,'Pools'),(17,'ResetMyPasswordView'),(24,'SLA Misses'),(4,'Task Instances'),(18,'Task Logs'),(28,'Task Reschedules'),(13,'UserDBModelView'),(16,'UserInfoEditView'),(22,'UserLDAPModelView'),(19,'UserOAuthModelView'),(15,'UserOIDModelView'),(20,'UserRemoteUserModelView'),(8,'Variables'),(12,'Website'),(9,'XComs');
/*!40000 ALTER TABLE `ab_view_menu` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `alembic_version`
--

DROP TABLE IF EXISTS `alembic_version`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `alembic_version` (
  `version_num` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`version_num`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `alembic_version`
--

LOCK TABLES `alembic_version` WRITE;
/*!40000 ALTER TABLE `alembic_version` DISABLE KEYS */;
INSERT INTO `alembic_version` VALUES ('82b7c48c147f');
/*!40000 ALTER TABLE `alembic_version` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `connection`
--

DROP TABLE IF EXISTS `connection`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `connection` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `conn_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `conn_type` varchar(500) COLLATE utf8_unicode_ci NOT NULL,
  `host` varchar(500) COLLATE utf8_unicode_ci DEFAULT NULL,
  `schema` varchar(500) COLLATE utf8_unicode_ci DEFAULT NULL,
  `login` varchar(500) COLLATE utf8_unicode_ci DEFAULT NULL,
  `password` varchar(5000) COLLATE utf8_unicode_ci DEFAULT NULL,
  `port` int(11) DEFAULT NULL,
  `extra` varchar(5000) COLLATE utf8_unicode_ci DEFAULT NULL,
  `is_encrypted` tinyint(1) DEFAULT NULL,
  `is_extra_encrypted` tinyint(1) DEFAULT NULL,
  `description` text COLLATE utf8_unicode_ci,
  PRIMARY KEY (`id`),
  UNIQUE KEY `unique_conn_id` (`conn_id`)
) ENGINE=InnoDB AUTO_INCREMENT=48 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `connection`
--

LOCK TABLES `connection` WRITE;
/*!40000 ALTER TABLE `connection` DISABLE KEYS */;
INSERT INTO `connection` VALUES (1,'airflow_db','mysql','mysql','airflow','root',NULL,NULL,NULL,0,0,NULL),(2,'aws_default','aws',NULL,NULL,NULL,NULL,NULL,NULL,0,0,NULL),(3,'azure_batch_default','azure_batch',NULL,NULL,'<ACCOUNT_NAME>',NULL,NULL,'gAAAAABgLrTlPMGB3sgZw7RT4nytZ2KS3nIDcIS-SWPM1Ehvmk6ijFP8yG5I2JWzJjt6oCu9Keyq25wkIR00XjM7QU-kqDnmmdyNTXePvxZiot42vLzCt1FA3FXF7NR_KTbWbv3nYw5M',0,1,NULL),(4,'azure_container_instances_default','azure_container_instances',NULL,NULL,NULL,NULL,NULL,'gAAAAABgLrTl4kr_jDX6fgx1_7ymIPWX-nmTNCygQooVVOuHcworeWB81nFlUK0Yw_a3oyuYF0s6W6j-_b4r4yTGzb1QbYTWH3wDElphbo9qOH8m4CmNwJeHFh1Hj6t_9bsYi81Ufsi2vO7zdYXIpLOMEaqcCS94t_fTv04fxgjYTH7ov8uF7pM=',0,1,NULL),(5,'azure_cosmos_default','azure_cosmos',NULL,NULL,NULL,NULL,NULL,'gAAAAABgLrTlHqyqnIYOuBO8W025f74dlhUfQcZaAywP8w1xQJF1QZMYmh1N3Xni5eoGtiS7LnDmEEirNR6w6AIURcRolF2dUjm04hi5lgG_tSsNVMM_s_IjQ9FFMD6BirCfgL8X2F9x4vA6QI64m7T086LnQ3YXNdgFdSXmBtOirvhcFmGsbqU=',0,1,NULL),(6,'azure_data_explorer_default','azure_data_explorer','https://<CLUSTER>.kusto.windows.net',NULL,NULL,NULL,NULL,'gAAAAABgLrTlKe9pk9rxvq-hGjDO4ZwfObKhmkJB5G-G_Rz8NOhdcQ5RV9k4atUQa6jk7EXwY8BqJr52mQY3IZzvIai_-KbR4tJXpg6aWeyuHnO-XlTl_RuxgcKca7xYNUmZEahpE600UBKX5exFG05K1Jb0DtsNioPvItZwVxbCajps_geVtK3jf1nC7ychoAoLpIz1secH5XrzFn8JkQ_Kb-4QrxnHdCdeR5T1K0Ag11Wzr8fNceNZ8-U7FyeiSOWBJg3hqVKLDMX3eeDMoAhQl81z3krwAQ8ja_arGPxVCxDYHRGa5Zy3eB0082lTTxHF0fgQfkxtnebSTi3smVuzemad9ONqY6wa5bXi9lxBECa7oYdsd0FO8jhX8qTs4QJGs7tT_1JZ',0,1,NULL),(7,'azure_data_lake_default','azure_data_lake',NULL,NULL,NULL,NULL,NULL,'gAAAAABgLrTl0FU9bFyYPCIvn6flnHuuL6jMIzfvRvA1OiaDwbRpwKwP6xab-BbZtBbfN1cnoRRWEHR-5PuwrqDiT9UC3Y2tqVO36LtNOdL31CKPqqrDbCkg1EHOi6vMGc-fBsrdJYpwEC8yWHjlxkhYkgzcf-_Bcw==',0,1,NULL),(8,'cassandra_default','cassandra','cassandra',NULL,NULL,NULL,9042,NULL,0,0,NULL),(9,'databricks_default','databricks','localhost',NULL,NULL,NULL,NULL,NULL,0,0,NULL),(10,'dingding_default','http','',NULL,NULL,NULL,NULL,NULL,0,0,NULL),(11,'druid_broker_default','druid','druid-broker',NULL,NULL,NULL,8082,'gAAAAABgLrTlvU0nXJBICRrK2CFirk5HMF869kpbpeZvj387kW9ioESdSh73cK36G6mZuOurEBkOtodNBHNkPlFLTPdOUJDFsPJgWrk0AA4ZcNfJgOBn0l4=',0,1,NULL),(12,'druid_ingest_default','druid','druid-overlord',NULL,NULL,NULL,8081,'gAAAAABgLrTlomrFDhOP2g0enKkiaGPET9WvJfTZAdfyLehRLenMeAAteXl-ziqdFw7BF4SpcfN5Js2YIOcBgE6VSRJwAWZy_hBceA-OsYVGLZfFQrxfJ9L5zmdKQBUvyoj5jpUT-gp9',0,1,NULL),(13,'elasticsearch_default','elasticsearch','localhost','http',NULL,NULL,9200,NULL,0,0,NULL),(14,'emr_default','emr',NULL,NULL,NULL,NULL,NULL,'gAAAAABgLrTlSLWLjeSYd-G-vDZ4K-WVu_r8IQJPdxEr3n_v8oVXiPu7zRfma_x7Z9Xta3Z_J8VU_T855ITtnMAVE6JnO7P4q7jlvDbyC7EFhtRthPVDkUVUz4yQ8iGJFCI3Iq0WbfbpV7ptghblCKiXuQvxJFoGbHis-gYIwOfbEAe0W0rBmYgKufX2eRtK7c0-YVsa9IxpAUBYDSwlDj8CRgm0nHhvtJmwRMztGDudIVY_P165vdlEFyfDjmB-G2e03Q-3sGbiIo_fcN1hfaX7Hoj8qk2S13x-pK5DxJtYIcWMxfRb0idyI30N6aRZGfjYSq6HCmRtpJlWP6dVu2HPqmEzAJqdj5XB4yzQq9PdnMpYd9uT-cAvEIuC-G2zNW6eSUCQyslzZVnug_Xd2gJsLzaqCTyJkj8dvpvXC9kl1Al8amLV-BUFPjltuIXDtYNFYmlS-SS_2MWwUu92ijsL9pVTKP8ZsQTGMyhu_wWLgZjAxilhkCGnJo1GicSVrea_Um7K2zD-l2j1kVB3cutPiXUzNeHPaEsURacsuknEhOhLA1HX2J8QQV7JIMNP7yrMEdk0gb_U-rAIDkZis-cSwLzAI4ZQIU2OvqlA6RSpS-JAvLw0erhO6aiSFgrP-I01XQPGmMcTIR5U4OaCadIloKnJm-QeZaiuldAm-FQnn57vFOFhp5LkVfOd0UcosW8BV4SP78Y1MuNC2aa2Da_tyE9P8Jorp9ImVulrgz_Ammt0_5Me2kGPRzbm22_grKsNkz7lL-P_K4-FyjmeguTNptC-DsV8SKTa9XZpXZzZJnPUMwn2FV_IdggWArktDignaryzuVydXVQaraE3JJRm9UXO-WvQQT5DN3eOlFeLVOuxD8v41WtSthJ-68Zs0kPdpKDZrYN9PhzMeoAGdIvo7sYkxHeFfIplVaZquynKl-vFCLnezJp89NF4L6p_pzzRm1JZvbgMrFqvyYzNMZTp8t-VX84JVdSSoDR7696l4M4bLV1feTOJ4nl-AvtB70Iofls89ftKVnDxonmqf_GL9pyZzyHWlfdONmS-zTqIB8MjjEHxNTWXj6oqxyNQcxBR01_Ao4xWnmCpldLA_xuhCIo7pPex4QT2pFHG1A8PMWUrycnItegnVkGr7wYxZYt2Geqvoo0LILUO9WnEy3RWTXBqW8j9OMclRJnBf5s0tlAda43yJrD8OAnn_2JXC0lYN_yskYWNS4t5u-8m7PwCploo2zVEeGnqS-OwkjWf2Y3KmPVxOwrxlpDs189tsKvN5jBSuF8HlEeA5DYJ0YFCnvimuw0VheVBSPt2prPnP_2aLDKQ67wCskb9vH8gnazFHoSBv6SID4cTuUScnA7qMqsI1PFdOQaUsG0ukFsJbs-OtpqI-Lddxp3u4Q1x5jij6pyt3VxUwx5EfjtzbIhDvEmrmiYnB7Uj9jr17hFv7sAf5jg776XhsfUrFcoPziR2rz1dVEwjWsgsBVjygM0lrvv9JGknRfoZlhNJQG1CGzH86cTwZbvgi0Agl40cf5bj1pqQWJ_WrAPCjdPrjSw85Qgi-EN9Y9lTETKEjUxqOwELxptALa_8t7SBUSwByIq0SVK7NP5ZKi-bIiF7f_ZxzqC-S_2dxk365WWrY6P6bvzeA4HFW6gSskzremQFKFAvezf-GA3nNl6kkJ2Dx6LKAg22xA1Rc17FSxTvK1m2BSagTauZgZXdIzkYf6ORFQOeHjbygrRE1TtM5cjCEnPD9owDYEZDVVjNE56w2uFIBBsP1DflxDEf9YykdSpnLQx06-Jak7ioIgjshlwn7pUK4-fxHi7VEY-2xYA4scEZM7geYmIisrqc3Hzhj2RkOnFk9r4EQ6oU6VrEyNtKZ-Drggo6A41W6x-nq3S_2e5KtbR0WK7CV4lHj8IxE3zWGu2JhBFxkMur2PmQuvgxmjg0_PIoINF6EIy82XTmOC3jhZ3QaG6rsaAu3t2syST_T4Dv5F3eHaw9OTPUOwYBfcUe8kxKAXugsGJpp-BsJ9klbx8MzlGmUEpNwacMfENl3L9Be6g6Uyg7O-PKj4Dj-CBDeGDre3-O3GJeAnoTKNijSfW70YOJF1GGh9DY8wy97skOVxCP6YP4CvKTE7DisZcAPSrE46NIVIfmQTwTkivtNiwh6CAInZMGwfIKTQfGMaVUG7FlIKYaFOe1XmFaWrBdQB4aNs72aH07rZxRFLRo3yzU9LLlrhVRPXWg-Sc-T9Qd0W_JQ0S1DvkH85vE9sXdvoFLBPEelC7R8XYsZtKPrrrZHv_KAbUmj0VOZajlDlAGvbGP6INccS2qS9scOf_Zglv7bvqoqQARbef2FzTO7CtJYQ_kyv-vKbYDtM4OeFzAk4RA-71-uiIcEjHzhS9VV3KGko6JJMD6bSs-pTPdWCQob7LWXUG6OSjXoE2Y-g_Pwrm0XzKW3OIimWqlzRa28ygHLSl_6XuMR2kc_trjaDjJpxrPvG4meSval5mIn6uD8kfN9695hmWy7lNoWmEEr5XdXOUY3b9mHF5OLtUHiWsSupBA2I8=',0,1,NULL),(15,'facebook_default','facebook_social',NULL,NULL,NULL,NULL,NULL,'gAAAAABgLrTleheE4gjXTmLBAueladq5HMb-ERcxUGX_GUd_wBvdhUsbwuj54xCMYZwT5A22PqsjfKLYEcdEVXcoe17LXYw_Ex0Jlrki_qNTWeraZnudK_A95L1h4UZu0ko-H6oyC1gQGtsdxEKnHlQzO0XkurUMmJ5R9p9Sc2gXPHGQDOsijh0W-H5DedSEYtuvR8EAtEyEyjp8FPmUpeTfH6VJcfrb90OVIp8TdeBUZJbZ0egtcG5vc0vHQz54I43H6UO2fXEJf4xW21PJ0Wv_6nuqSj6_WxGM6BYDnp9HuUPCevwKSnjPz2TM9y-NcPMv0OPjdNSt3LyVgYB9mDVBX54svmAkbHjPhgGKFZW4E0hQR4SDSzEIY3cG8r3V7pZa8gQzvweEkpdouJ5ae8d5vUcNnlX8hpINLFQcpODdRa0eCbMUjek=',0,1,NULL),(16,'fs_default','fs',NULL,NULL,NULL,NULL,NULL,'gAAAAABgLrTlCqi2PcqJ1yZGxZe3PqFnaKhzQ0Lp3abYR48WAD1POgL7jnomZgL1F8GqCJT0zc1jVcgwVrNDpiRfYjg_2-8rYw==',0,1,NULL),(17,'google_cloud_default','google_cloud_platform',NULL,'default',NULL,NULL,NULL,NULL,0,0,NULL),(18,'hive_cli_default','hive_cli','localhost','default',NULL,NULL,10000,'gAAAAABgLrTlhgeXobU_yLRJfQuRhq_hmx-1STLkqMhO4S5qan058C2usjy6iQ3n0AASmmGUmd2eKgb7yRjiCsPfHBN1tlAoyAl03WZurG62jWP4Xncdlwf2bHaYmUGgmCo68jdL4ify',0,1,NULL),(19,'hiveserver2_default','hiveserver2','localhost','default',NULL,NULL,10000,NULL,0,0,NULL),(20,'http_default','http','https://www.httpbin.org/',NULL,NULL,NULL,NULL,NULL,0,0,NULL),(21,'kubernetes_default','kubernetes',NULL,NULL,NULL,NULL,NULL,NULL,0,0,NULL),(22,'kylin_default','kylin','localhost',NULL,'ADMIN','gAAAAABgLrTlx_U-v4y-I6Q4If4g4thU5vDlZ4Db3aaLAMyKBMZcb0t-ktm9p_KWFEz4Lq9ImWpvt5sCTrcpvJSKzC6UnO330w==',7070,NULL,1,0,NULL),(23,'livy_default','livy','livy',NULL,NULL,NULL,8998,NULL,0,0,NULL),(24,'local_mysql','mysql','localhost','airflow','airflow','gAAAAABgLrTl1XuHh6BjbFiPyid_-NyRLxK9u2GO-nYM_Gk2wiNOvsGQoTh0NLm7RHXCl6FLoW0qBmFKQwUn_JcQGMLF7w-E1A==',NULL,NULL,1,0,NULL),(25,'metastore_default','hive_metastore','localhost',NULL,NULL,NULL,9083,'gAAAAABgLrTlaus-7gUpwmIz06lhWYX4OP-FL3_tSySxSR249RvK-R1STbg8ljzrjIbEBQ_iS5-ZZW2b5JwzENPUUK-zIhSSKS6zUmM0QVYkNfICisBqBK0=',0,1,NULL),(26,'mongo_default','mongo','mongo',NULL,NULL,NULL,27017,NULL,0,0,NULL),(27,'mssql_default','mssql','localhost',NULL,NULL,NULL,1433,NULL,0,0,NULL),(28,'mysql_default','mysql','mysql','airflow','root',NULL,NULL,NULL,0,0,NULL),(29,'opsgenie_default','http','',NULL,NULL,NULL,NULL,NULL,0,0,NULL),(30,'pig_cli_default','pig_cli',NULL,'default',NULL,NULL,NULL,NULL,0,0,NULL),(31,'pinot_admin_default','pinot','localhost',NULL,NULL,NULL,9000,NULL,0,0,NULL),(32,'pinot_broker_default','pinot','localhost',NULL,NULL,NULL,9000,'gAAAAABgLrTlmS8G5_v4Tn5TpON75xs-dI9elHYviFvAxfy5xhpgkae2zvILwxO-JHswwlgw8xSpsEZiRa8Sfqjix61ZMAvh0c90VuGGNgCbI3m_y2VOeslXXujXix7QvlxQ4vXmmmvJ',0,1,NULL),(33,'postgres_default','postgres','postgres','airflow','postgres','gAAAAABgLrTlzEcJ20fG_eiyxMY1ZPzDPBFrPo0jJQWW1H3zlB2IUuWv1URempOzMZCQf8nB4aUOzbZH_jtlVxrHFsDBA_s4SQ==',NULL,NULL,1,0,NULL),(34,'presto_default','presto','localhost','hive',NULL,NULL,3400,NULL,0,0,NULL),(35,'qubole_default','qubole','localhost',NULL,NULL,NULL,NULL,NULL,0,0,NULL),(36,'redis_default','redis','redis',NULL,NULL,NULL,6379,'gAAAAABgLrTlga5oixiBeiQ4tFOsEiqPAZB7oTP-c-BfzZXzh2Wg6aLW3j7-dYodLxWQGu7d3qzBGH9KcelFLZnCBaAdV_RDQw==',0,1,NULL),(37,'segment_default','segment',NULL,NULL,NULL,NULL,NULL,'gAAAAABgLrTm_RNHBdirpDbI1fGSKqpY2tLVhFSDJl-oLKGMkrG92Qm0u5CgCIN1BYrRTeawukTdaZk5iTaTzhk4onEoHDk6MWt0UxZbf9xo4J_1rh3MiYIx-pkNGPbt5j1s6hiRouy-',0,1,NULL),(38,'sftp_default','sftp','localhost',NULL,'airflow',NULL,22,'gAAAAABgLrTmOnoweA6XRKMpuFyP1zD1DQSPfhJltd-lVLe3xNLYnvEW9fNc1DZxDFg4gP6elUuX1ErZDlx52YE-CQO3G3JluMh0XgCSxym3crjDb2eT2BR7-34D9cSKKKaMhY5WPEoqTrU3JUqMouOv_-Rc3RT3cA==',0,1,NULL),(39,'spark_default','spark','yarn',NULL,NULL,NULL,NULL,'gAAAAABgLrTmM7OUsEuQlrlRQ6fmf7W5QLoWSTY8PbjhCVCrLPswnBuc0l-1odoD6MayhAc1uCbXEC_FUfgJyC8l8IAvFkQrdjvd9997VpBfCaMY0kvRTdU=',0,1,NULL),(40,'sqlite_default','sqlite','/tmp/sqlite_default.db',NULL,NULL,NULL,NULL,NULL,0,0,NULL),(41,'sqoop_default','sqoop','rdbms',NULL,NULL,NULL,NULL,NULL,0,0,NULL),(42,'ssh_default','ssh','localhost',NULL,NULL,NULL,NULL,NULL,0,0,NULL),(43,'tableau_default','tableau','https://tableau.server.url',NULL,'user','gAAAAABgLrTmQzw62rXHvm3fPnp4hC4AceP34ZLKqvlT2C5PMjh4sYryJaKSnezGm1S3QdWCTvoSJK865qNIGui-0HHa8gkN_g==',NULL,'gAAAAABgLrTmA_ZplUpqv3NnAeAoZJLhUdlyYG3R3B0d3oDL1d2qB6js1KhTxiTbxyvJABsjalEbFaTfAlotCCRk3KEI1Gndkjo4d1-a4bolKmYVNXC3U0c=',1,1,NULL),(44,'vertica_default','vertica','localhost',NULL,NULL,NULL,5433,NULL,0,0,NULL),(45,'wasb_default','wasb',NULL,NULL,NULL,NULL,NULL,'gAAAAABgLrTmy0U-lDZJtHY5ga62AXauqcW5Kvgv_0lTfeQX1-Zesb4fzLvkiTFOu-d17R2TetTNQROvEs7FrLZAH2DaFa9jXD6OTjQvNWlSU1A-yvCoZ1w=',0,1,NULL),(46,'webhdfs_default','hdfs','localhost',NULL,NULL,NULL,50070,NULL,0,0,NULL),(47,'yandexcloud_default','yandexcloud',NULL,'default',NULL,NULL,NULL,NULL,0,0,NULL);
/*!40000 ALTER TABLE `connection` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dag`
--

DROP TABLE IF EXISTS `dag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `dag` (
  `dag_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `is_paused` tinyint(1) DEFAULT NULL,
  `is_subdag` tinyint(1) DEFAULT NULL,
  `is_active` tinyint(1) DEFAULT NULL,
  `last_scheduler_run` timestamp(6) NULL DEFAULT NULL,
  `last_pickled` timestamp(6) NULL DEFAULT NULL,
  `last_expired` timestamp(6) NULL DEFAULT NULL,
  `scheduler_lock` tinyint(1) DEFAULT NULL,
  `pickle_id` int(11) DEFAULT NULL,
  `fileloc` varchar(2000) COLLATE utf8_unicode_ci DEFAULT NULL,
  `owners` varchar(2000) COLLATE utf8_unicode_ci DEFAULT NULL,
  `description` text COLLATE utf8_unicode_ci,
  `default_view` varchar(25) COLLATE utf8_unicode_ci DEFAULT NULL,
  `schedule_interval` text COLLATE utf8_unicode_ci,
  `root_dag_id` varchar(250) COLLATE utf8_unicode_ci DEFAULT NULL,
  `next_dagrun` timestamp(6) NULL DEFAULT NULL,
  `next_dagrun_create_after` timestamp(6) NULL DEFAULT NULL,
  `concurrency` int(11) NOT NULL,
  `has_task_concurrency_limits` tinyint(1) NOT NULL,
  PRIMARY KEY (`dag_id`),
  KEY `idx_root_dag_id` (`root_dag_id`),
  KEY `idx_next_dagrun_create_after` (`next_dagrun_create_after`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dag`
--

LOCK TABLES `dag` WRITE;
/*!40000 ALTER TABLE `dag` DISABLE KEYS */;
INSERT INTO `dag` VALUES ('example_bash_operator',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_bash_operator.py','airflow',NULL,'tree','\"0 0 * * *\"',NULL,'2021-02-16 00:00:00.000000','2021-02-17 00:00:00.000000',16,0),('example_branch_dop_operator_v3',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_branch_python_dop_operator_3.py','airflow',NULL,'tree','\"*/1 * * * *\"',NULL,'2021-02-16 00:00:00.000000','2021-02-16 00:01:00.000000',16,0),('example_branch_operator',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_branch_operator.py','airflow',NULL,'tree','\"@daily\"',NULL,'2021-02-16 00:00:00.000000','2021-02-17 00:00:00.000000',16,0),('example_complex',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_complex.py','airflow',NULL,'tree','null',NULL,NULL,NULL,16,0),('example_dag_decorator',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_dag_decorator.py','airflow',NULL,'tree','null',NULL,NULL,NULL,16,0),('example_external_task_marker_child',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_external_task_marker_dag.py','airflow',NULL,'tree','null',NULL,NULL,NULL,16,0),('example_external_task_marker_parent',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_external_task_marker_dag.py','airflow',NULL,'tree','null',NULL,NULL,NULL,16,0),('example_kubernetes_executor',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_kubernetes_executor.py','airflow',NULL,'tree','null',NULL,NULL,NULL,16,0),('example_nested_branch_dag',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_nested_branch_dag.py','airflow',NULL,'tree','\"@daily\"',NULL,'2021-02-16 00:00:00.000000','2021-02-17 00:00:00.000000',16,0),('example_passing_params_via_test_command',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_passing_params_via_test_command.py','airflow',NULL,'tree','\"*/1 * * * *\"',NULL,'2021-02-17 00:00:00.000000','2021-02-17 00:01:00.000000',16,0),('example_python_operator',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_python_operator.py','airflow',NULL,'tree','null',NULL,NULL,NULL,16,0),('example_short_circuit_operator',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_short_circuit_operator.py','airflow',NULL,'tree','{\"type\": \"timedelta\", \"attrs\": {\"days\": 1, \"seconds\": 0, \"microseconds\": 0}}',NULL,'2021-02-16 00:00:00.000000','2021-02-17 00:00:00.000000',16,0),('example_skip_dag',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_skip_dag.py','airflow',NULL,'tree','{\"type\": \"timedelta\", \"attrs\": {\"days\": 1, \"seconds\": 0, \"microseconds\": 0}}',NULL,'2021-02-16 00:00:00.000000','2021-02-17 00:00:00.000000',16,0),('example_subdag_operator',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_subdag_operator.py','airflow',NULL,'tree','\"@once\"',NULL,'2021-02-16 00:00:00.000000','2021-02-16 00:00:00.000000',16,0),('example_subdag_operator.section-1',1,1,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_subdag_operator.py','airflow',NULL,'tree','\"@daily\"','example_subdag_operator',NULL,NULL,16,0),('example_subdag_operator.section-2',1,1,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_subdag_operator.py','airflow',NULL,'tree','\"@daily\"','example_subdag_operator',NULL,NULL,16,0),('example_task_group',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_task_group.py','airflow',NULL,'tree','{\"type\": \"timedelta\", \"attrs\": {\"days\": 1, \"seconds\": 0, \"microseconds\": 0}}',NULL,'2021-02-16 00:00:00.000000','2021-02-17 00:00:00.000000',16,0),('example_trigger_controller_dag',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_trigger_controller_dag.py','airflow',NULL,'tree','\"@once\"',NULL,'2021-02-16 00:00:00.000000','2021-02-16 00:00:00.000000',16,0),('example_trigger_target_dag',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_trigger_target_dag.py','airflow',NULL,'tree','null',NULL,NULL,NULL,16,0),('example_xcom',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_xcom.py','airflow',NULL,'tree','\"@once\"',NULL,'2021-02-16 00:00:00.000000','2021-02-16 00:00:00.000000',16,0),('example_xcom_args',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_xcomargs.py','airflow',NULL,'tree','null',NULL,NULL,NULL,16,0),('example_xcom_args_with_operators',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_xcomargs.py','airflow',NULL,'tree','null',NULL,NULL,NULL,16,0),('latest_only',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_latest_only.py','airflow',NULL,'tree','{\"type\": \"timedelta\", \"attrs\": {\"days\": 0, \"seconds\": 14400, \"microseconds\": 0}}',NULL,'2021-02-16 00:00:00.000000','2021-02-16 04:00:00.000000',16,0),('latest_only_with_trigger',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_latest_only_with_trigger.py','airflow',NULL,'tree','{\"type\": \"timedelta\", \"attrs\": {\"days\": 0, \"seconds\": 14400, \"microseconds\": 0}}',NULL,'2021-02-16 00:00:00.000000','2021-02-16 04:00:00.000000',16,0),('test_utils',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/test_utils.py','airflow',NULL,'tree','null',NULL,NULL,NULL,16,0),('tutorial',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/tutorial.py','airflow','A simple tutorial DAG','tree','{\"type\": \"timedelta\", \"attrs\": {\"days\": 1, \"seconds\": 0, \"microseconds\": 0}}',NULL,'2021-02-16 00:00:00.000000','2021-02-17 00:00:00.000000',16,0),('tutorial_etl_dag',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/tutorial_etl_dag.py','airflow','ETL DAG tutorial','tree','null',NULL,NULL,NULL,16,0),('tutorial_taskflow_api_etl',1,0,1,NULL,NULL,NULL,NULL,NULL,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/tutorial_taskflow_api_etl.py','airflow',NULL,'tree','null',NULL,NULL,NULL,16,0);
/*!40000 ALTER TABLE `dag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dag_code`
--

DROP TABLE IF EXISTS `dag_code`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `dag_code` (
  `fileloc_hash` bigint(20) NOT NULL,
  `fileloc` varchar(2000) COLLATE utf8_unicode_ci NOT NULL,
  `source_code` mediumtext COLLATE utf8_unicode_ci NOT NULL,
  `last_updated` timestamp NOT NULL,
  PRIMARY KEY (`fileloc_hash`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dag_code`
--

LOCK TABLES `dag_code` WRITE;
/*!40000 ALTER TABLE `dag_code` DISABLE KEYS */;
INSERT INTO `dag_code` VALUES (1654745493949208,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_trigger_target_dag.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"\nExample usage of the TriggerDagRunOperator. This example holds 2 DAGs:\n1. 1st DAG (example_trigger_controller_dag) holds a TriggerDagRunOperator, which will trigger the 2nd DAG\n2. 2nd DAG (example_trigger_target_dag) which will be triggered by the TriggerDagRunOperator in the 1st DAG\n\"\"\"\n\nfrom airflow import DAG\nfrom airflow.operators.bash import BashOperator\nfrom airflow.operators.python import PythonOperator\nfrom airflow.utils.dates import days_ago\n\ndag = DAG(\n    dag_id=\"example_trigger_target_dag\",\n    default_args={\"owner\": \"airflow\"},\n    start_date=days_ago(2),\n    schedule_interval=None,\n    tags=[\'example\'],\n)\n\n\ndef run_this_func(**context):\n    \"\"\"\n    Print the payload \"message\" passed to the DagRun conf attribute.\n\n    :param context: The execution context\n    :type context: dict\n    \"\"\"\n    print(\"Remotely received value of {} for key=message\".format(context[\"dag_run\"].conf[\"message\"]))\n\n\nrun_this = PythonOperator(task_id=\"run_this\", python_callable=run_this_func, dag=dag)\n\nbash_task = BashOperator(\n    task_id=\"bash_task\",\n    bash_command=\'echo \"Here is the message: $message\"\',\n    env={\'message\': \'{{ dag_run.conf[\"message\"] if dag_run else \"\" }}\'},\n    dag=dag,\n)\n','2021-02-18 18:41:43'),(4058184967514074,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_xcomargs.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Example DAG demonstrating the usage of the XComArgs.\"\"\"\nimport logging\n\nfrom airflow import DAG\nfrom airflow.operators.bash import BashOperator\nfrom airflow.operators.python import PythonOperator, get_current_context, task\nfrom airflow.utils.dates import days_ago\n\nlog = logging.getLogger(__name__)\n\n\ndef generate_value():\n    \"\"\"Dummy function\"\"\"\n    return \"Bring me a shrubbery!\"\n\n\n@task()\ndef print_value(value):\n    \"\"\"Dummy function\"\"\"\n    ctx = get_current_context()\n    log.info(\"The knights of Ni say: %s (at %s)\", value, ctx[\'ts\'])\n\n\nwith DAG(\n    dag_id=\'example_xcom_args\',\n    default_args={\'owner\': \'airflow\'},\n    start_date=days_ago(2),\n    schedule_interval=None,\n    tags=[\'example\'],\n) as dag:\n    task1 = PythonOperator(\n        task_id=\'generate_value\',\n        python_callable=generate_value,\n    )\n\n    print_value(task1.output)\n\n\nwith DAG(\n    \"example_xcom_args_with_operators\",\n    default_args={\'owner\': \'airflow\'},\n    start_date=days_ago(2),\n    schedule_interval=None,\n    tags=[\'example\'],\n) as dag2:\n    bash_op1 = BashOperator(task_id=\"c\", bash_command=\"echo c\")\n    bash_op2 = BashOperator(task_id=\"d\", bash_command=\"echo c\")\n    xcom_args_a = print_value(\"first!\")\n    xcom_args_b = print_value(\"second!\")\n\n    bash_op1 >> xcom_args_a >> xcom_args_b >> bash_op2\n','2021-02-18 18:41:43'),(7648444505613723,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_xcom.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Example DAG demonstrating the usage of XComs.\"\"\"\nfrom airflow import DAG\nfrom airflow.operators.python import PythonOperator\nfrom airflow.utils.dates import days_ago\n\ndag = DAG(\n    \'example_xcom\',\n    schedule_interval=\"@once\",\n    start_date=days_ago(2),\n    default_args={\'owner\': \'airflow\'},\n    tags=[\'example\'],\n)\n\nvalue_1 = [1, 2, 3]\nvalue_2 = {\'a\': \'b\'}\n\n\ndef push(**kwargs):\n    \"\"\"Pushes an XCom without a specific target\"\"\"\n    kwargs[\'ti\'].xcom_push(key=\'value from pusher 1\', value=value_1)\n\n\ndef push_by_returning(**kwargs):\n    \"\"\"Pushes an XCom without a specific target, just by returning it\"\"\"\n    return value_2\n\n\ndef puller(**kwargs):\n    \"\"\"Pull all previously pushed XComs and check if the pushed values match the pulled values.\"\"\"\n    ti = kwargs[\'ti\']\n\n    # get value_1\n    pulled_value_1 = ti.xcom_pull(key=None, task_ids=\'push\')\n    if pulled_value_1 != value_1:\n        raise ValueError(f\'The two values differ {pulled_value_1} and {value_1}\')\n\n    # get value_2\n    pulled_value_2 = ti.xcom_pull(task_ids=\'push_by_returning\')\n    if pulled_value_2 != value_2:\n        raise ValueError(f\'The two values differ {pulled_value_2} and {value_2}\')\n\n    # get both value_1 and value_2\n    pulled_value_1, pulled_value_2 = ti.xcom_pull(key=None, task_ids=[\'push\', \'push_by_returning\'])\n    if pulled_value_1 != value_1:\n        raise ValueError(f\'The two values differ {pulled_value_1} and {value_1}\')\n    if pulled_value_2 != value_2:\n        raise ValueError(f\'The two values differ {pulled_value_2} and {value_2}\')\n\n\npush1 = PythonOperator(\n    task_id=\'push\',\n    dag=dag,\n    python_callable=push,\n)\n\npush2 = PythonOperator(\n    task_id=\'push_by_returning\',\n    dag=dag,\n    python_callable=push_by_returning,\n)\n\npull = PythonOperator(\n    task_id=\'puller\',\n    dag=dag,\n    python_callable=puller,\n)\n\npull << [push1, push2]\n','2021-02-18 18:41:43'),(10152734057239658,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_passing_params_via_test_command.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Example DAG demonstrating the usage of the params arguments in templated arguments.\"\"\"\n\nimport os\nfrom datetime import timedelta\n\nfrom airflow import DAG\nfrom airflow.operators.bash import BashOperator\nfrom airflow.operators.python import PythonOperator\nfrom airflow.utils.dates import days_ago\n\ndag = DAG(\n    \"example_passing_params_via_test_command\",\n    default_args={\n        \"owner\": \"airflow\",\n    },\n    schedule_interval=\'*/1 * * * *\',\n    start_date=days_ago(1),\n    dagrun_timeout=timedelta(minutes=4),\n    tags=[\'example\'],\n)\n\n\ndef my_py_command(test_mode, params):\n    \"\"\"\n    Print out the \"foo\" param passed in via\n    `airflow tasks test example_passing_params_via_test_command run_this <date>\n    -t \'{\"foo\":\"bar\"}\'`\n    \"\"\"\n    if test_mode:\n        print(\n            \" \'foo\' was passed in via test={} command : kwargs[params][foo] \\\n               = {}\".format(\n                test_mode, params[\"foo\"]\n            )\n        )\n    # Print out the value of \"miff\", passed in below via the Python Operator\n    print(\" \'miff\' was passed in via task params = {}\".format(params[\"miff\"]))\n    return 1\n\n\nmy_templated_command = \"\"\"\n    echo \" \'foo was passed in via Airflow CLI Test command with value {{ params.foo }} \"\n    echo \" \'miff was passed in via BashOperator with value {{ params.miff }} \"\n\"\"\"\n\nrun_this = PythonOperator(\n    task_id=\'run_this\',\n    python_callable=my_py_command,\n    params={\"miff\": \"agg\"},\n    dag=dag,\n)\n\nalso_run_this = BashOperator(\n    task_id=\'also_run_this\',\n    bash_command=my_templated_command,\n    params={\"miff\": \"agg\"},\n    dag=dag,\n)\n\n\ndef print_env_vars(test_mode):\n    \"\"\"\n    Print out the \"foo\" param passed in via\n    `airflow tasks test example_passing_params_via_test_command env_var_test_task <date>\n    --env-vars \'{\"foo\":\"bar\"}\'`\n    \"\"\"\n    if test_mode:\n        print(\"foo={}\".format(os.environ.get(\'foo\')))\n        print(\"AIRFLOW_TEST_MODE={}\".format(os.environ.get(\'AIRFLOW_TEST_MODE\')))\n\n\nenv_var_test_task = PythonOperator(task_id=\'env_var_test_task\', python_callable=print_env_vars, dag=dag)\n\nrun_this >> also_run_this\n','2021-02-18 18:41:43'),(11738610760434725,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/tutorial_etl_dag.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# pylint: disable=missing-function-docstring\n\n\"\"\"\n### ETL DAG Tutorial Documentation\nThis ETL DAG is compatible with Airflow 1.10.x (specifically tested with 1.10.12) and is referenced\nas part of the documentation that goes along with the Airflow Functional DAG tutorial located\n[here](https://airflow.apache.org/tutorial_decorated_flows.html)\n\"\"\"\n# [START tutorial]\n# [START import_module]\nimport json\n\n# The DAG object; we\'ll need this to instantiate a DAG\nfrom airflow import DAG\n\n# Operators; we need this to operate!\nfrom airflow.operators.python import PythonOperator\nfrom airflow.utils.dates import days_ago\n\n# [END import_module]\n\n# [START default_args]\n# These args will get passed on to each operator\n# You can override them on a per-task basis during operator initialization\ndefault_args = {\n    \'owner\': \'airflow\',\n}\n# [END default_args]\n\n# [START instantiate_dag]\nwith DAG(\n    \'tutorial_etl_dag\',\n    default_args=default_args,\n    description=\'ETL DAG tutorial\',\n    schedule_interval=None,\n    start_date=days_ago(2),\n    tags=[\'example\'],\n) as dag:\n    # [END instantiate_dag]\n    # [START documentation]\n    dag.doc_md = __doc__\n    # [END documentation]\n\n    # [START extract_function]\n    def extract(**kwargs):\n        ti = kwargs[\'ti\']\n        data_string = \'{\"1001\": 301.27, \"1002\": 433.21, \"1003\": 502.22}\'\n        ti.xcom_push(\'order_data\', data_string)\n\n    # [END extract_function]\n\n    # [START transform_function]\n    def transform(**kwargs):\n        ti = kwargs[\'ti\']\n        extract_data_string = ti.xcom_pull(task_ids=\'extract\', key=\'order_data\')\n        order_data = json.loads(extract_data_string)\n\n        total_order_value = 0\n        for value in order_data.values():\n            total_order_value += value\n\n        total_value = {\"total_order_value\": total_order_value}\n        total_value_json_string = json.dumps(total_value)\n        ti.xcom_push(\'total_order_value\', total_value_json_string)\n\n    # [END transform_function]\n\n    # [START load_function]\n    def load(**kwargs):\n        ti = kwargs[\'ti\']\n        total_value_string = ti.xcom_pull(task_ids=\'transform\', key=\'total_order_value\')\n        total_order_value = json.loads(total_value_string)\n\n        print(total_order_value)\n\n    # [END load_function]\n\n    # [START main_flow]\n    extract_task = PythonOperator(\n        task_id=\'extract\',\n        python_callable=extract,\n    )\n    extract_task.doc_md = \"\"\"\\\n#### Extract task\nA simple Extract task to get data ready for the rest of the data pipeline.\nIn this case, getting data is simulated by reading from a hardcoded JSON string.\nThis data is then put into xcom, so that it can be processed by the next task.\n\"\"\"\n\n    transform_task = PythonOperator(\n        task_id=\'transform\',\n        python_callable=transform,\n    )\n    transform_task.doc_md = \"\"\"\\\n#### Transform task\nA simple Transform task which takes in the collection of order data from xcom\nand computes the total order value.\nThis computed value is then put into xcom, so that it can be processed by the next task.\n\"\"\"\n\n    load_task = PythonOperator(\n        task_id=\'load\',\n        python_callable=load,\n    )\n    load_task.doc_md = \"\"\"\\\n#### Load task\nA simple Load task which takes in the result of the Transform task, by reading it\nfrom xcom and instead of saving it to end user review, just prints it out.\n\"\"\"\n\n    extract_task >> transform_task >> load_task\n\n# [END main_flow]\n\n# [END tutorial]\n','2021-02-18 18:41:43'),(16017097700992221,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_nested_branch_dag.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"\nExample DAG demonstrating a workflow with nested branching. The join tasks are created with\n``none_failed_or_skipped`` trigger rule such that they are skipped whenever their corresponding\n``BranchPythonOperator`` are skipped.\n\"\"\"\n\nfrom airflow.models import DAG\nfrom airflow.operators.dummy import DummyOperator\nfrom airflow.operators.python import BranchPythonOperator\nfrom airflow.utils.dates import days_ago\n\nwith DAG(\n    dag_id=\"example_nested_branch_dag\", start_date=days_ago(2), schedule_interval=\"@daily\", tags=[\"example\"]\n) as dag:\n    branch_1 = BranchPythonOperator(task_id=\"branch_1\", python_callable=lambda: \"true_1\")\n    join_1 = DummyOperator(task_id=\"join_1\", trigger_rule=\"none_failed_or_skipped\")\n    true_1 = DummyOperator(task_id=\"true_1\")\n    false_1 = DummyOperator(task_id=\"false_1\")\n    branch_2 = BranchPythonOperator(task_id=\"branch_2\", python_callable=lambda: \"true_2\")\n    join_2 = DummyOperator(task_id=\"join_2\", trigger_rule=\"none_failed_or_skipped\")\n    true_2 = DummyOperator(task_id=\"true_2\")\n    false_2 = DummyOperator(task_id=\"false_2\")\n    false_3 = DummyOperator(task_id=\"false_3\")\n\n    branch_1 >> true_1 >> join_1\n    branch_1 >> false_1 >> branch_2 >> [true_2, false_2] >> join_2 >> false_3 >> join_1\n','2021-02-18 18:41:43'),(18235940001873911,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/tutorial_taskflow_api_etl.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n# pylint: disable=missing-function-docstring\n\n# [START tutorial]\n# [START import_module]\nimport json\n\nfrom airflow.decorators import dag, task\nfrom airflow.utils.dates import days_ago\n\n# [END import_module]\n\n# [START default_args]\n# These args will get passed on to each operator\n# You can override them on a per-task basis during operator initialization\ndefault_args = {\n    \'owner\': \'airflow\',\n}\n# [END default_args]\n\n\n# [START instantiate_dag]\n@dag(default_args=default_args, schedule_interval=None, start_date=days_ago(2), tags=[\'example\'])\ndef tutorial_taskflow_api_etl():\n    \"\"\"\n    ### TaskFlow API Tutorial Documentation\n    This is a simple ETL data pipeline example which demonstrates the use of\n    the TaskFlow API using three simple tasks for Extract, Transform, and Load.\n    Documentation that goes along with the Airflow TaskFlow API tutorial is\n    located\n    [here](https://airflow.apache.org/docs/stable/tutorial_taskflow_api.html)\n    \"\"\"\n    # [END instantiate_dag]\n\n    # [START extract]\n    @task()\n    def extract():\n        \"\"\"\n        #### Extract task\n        A simple Extract task to get data ready for the rest of the data\n        pipeline. In this case, getting data is simulated by reading from a\n        hardcoded JSON string.\n        \"\"\"\n        data_string = \'{\"1001\": 301.27, \"1002\": 433.21, \"1003\": 502.22}\'\n\n        order_data_dict = json.loads(data_string)\n        return order_data_dict\n\n    # [END extract]\n\n    # [START transform]\n    @task(multiple_outputs=True)\n    def transform(order_data_dict: dict):\n        \"\"\"\n        #### Transform task\n        A simple Transform task which takes in the collection of order data and\n        computes the total order value.\n        \"\"\"\n        total_order_value = 0\n\n        for value in order_data_dict.values():\n            total_order_value += value\n\n        return {\"total_order_value\": total_order_value}\n\n    # [END transform]\n\n    # [START load]\n    @task()\n    def load(total_order_value: float):\n        \"\"\"\n        #### Load task\n        A simple Load task which takes in the result of the Transform task and\n        instead of saving it to end user review, just prints it out.\n        \"\"\"\n\n        print(\"Total order value is: %.2f\" % total_order_value)\n\n    # [END load]\n\n    # [START main_flow]\n    order_data = extract()\n    order_summary = transform(order_data)\n    load(order_summary[\"total_order_value\"])\n    # [END main_flow]\n\n\n# [START dag_invocation]\ntutorial_etl_dag = tutorial_taskflow_api_etl()\n# [END dag_invocation]\n\n# [END tutorial]\n','2021-02-18 18:41:43'),(18964047695475291,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_complex.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"\nExample Airflow DAG that shows the complex DAG structure.\n\"\"\"\n\nfrom airflow import models\nfrom airflow.models.baseoperator import chain\nfrom airflow.operators.bash import BashOperator\nfrom airflow.operators.python import PythonOperator\nfrom airflow.utils.dates import days_ago\n\nwith models.DAG(\n    dag_id=\"example_complex\",\n    schedule_interval=None,\n    start_date=days_ago(1),\n    tags=[\'example\', \'example2\', \'example3\'],\n) as dag:\n\n    # Create\n    create_entry_group = BashOperator(task_id=\"create_entry_group\", bash_command=\"echo create_entry_group\")\n\n    create_entry_group_result = BashOperator(\n        task_id=\"create_entry_group_result\", bash_command=\"echo create_entry_group_result\"\n    )\n\n    create_entry_group_result2 = BashOperator(\n        task_id=\"create_entry_group_result2\", bash_command=\"echo create_entry_group_result2\"\n    )\n\n    create_entry_gcs = BashOperator(task_id=\"create_entry_gcs\", bash_command=\"echo create_entry_gcs\")\n\n    create_entry_gcs_result = BashOperator(\n        task_id=\"create_entry_gcs_result\", bash_command=\"echo create_entry_gcs_result\"\n    )\n\n    create_entry_gcs_result2 = BashOperator(\n        task_id=\"create_entry_gcs_result2\", bash_command=\"echo create_entry_gcs_result2\"\n    )\n\n    create_tag = BashOperator(task_id=\"create_tag\", bash_command=\"echo create_tag\")\n\n    create_tag_result = BashOperator(task_id=\"create_tag_result\", bash_command=\"echo create_tag_result\")\n\n    create_tag_result2 = BashOperator(task_id=\"create_tag_result2\", bash_command=\"echo create_tag_result2\")\n\n    create_tag_template = BashOperator(task_id=\"create_tag_template\", bash_command=\"echo create_tag_template\")\n\n    create_tag_template_result = BashOperator(\n        task_id=\"create_tag_template_result\", bash_command=\"echo create_tag_template_result\"\n    )\n\n    create_tag_template_result2 = BashOperator(\n        task_id=\"create_tag_template_result2\", bash_command=\"echo create_tag_template_result2\"\n    )\n\n    create_tag_template_field = BashOperator(\n        task_id=\"create_tag_template_field\", bash_command=\"echo create_tag_template_field\"\n    )\n\n    create_tag_template_field_result = BashOperator(\n        task_id=\"create_tag_template_field_result\", bash_command=\"echo create_tag_template_field_result\"\n    )\n\n    create_tag_template_field_result2 = BashOperator(\n        task_id=\"create_tag_template_field_result2\", bash_command=\"echo create_tag_template_field_result\"\n    )\n\n    # Delete\n    delete_entry = BashOperator(task_id=\"delete_entry\", bash_command=\"echo delete_entry\")\n    create_entry_gcs >> delete_entry\n\n    delete_entry_group = BashOperator(task_id=\"delete_entry_group\", bash_command=\"echo delete_entry_group\")\n    create_entry_group >> delete_entry_group\n\n    delete_tag = BashOperator(task_id=\"delete_tag\", bash_command=\"echo delete_tag\")\n    create_tag >> delete_tag\n\n    delete_tag_template_field = BashOperator(\n        task_id=\"delete_tag_template_field\", bash_command=\"echo delete_tag_template_field\"\n    )\n\n    delete_tag_template = BashOperator(task_id=\"delete_tag_template\", bash_command=\"echo delete_tag_template\")\n\n    # Get\n    get_entry_group = BashOperator(task_id=\"get_entry_group\", bash_command=\"echo get_entry_group\")\n\n    get_entry_group_result = BashOperator(\n        task_id=\"get_entry_group_result\", bash_command=\"echo get_entry_group_result\"\n    )\n\n    get_entry = BashOperator(task_id=\"get_entry\", bash_command=\"echo get_entry\")\n\n    get_entry_result = BashOperator(task_id=\"get_entry_result\", bash_command=\"echo get_entry_result\")\n\n    get_tag_template = BashOperator(task_id=\"get_tag_template\", bash_command=\"echo get_tag_template\")\n\n    get_tag_template_result = BashOperator(\n        task_id=\"get_tag_template_result\", bash_command=\"echo get_tag_template_result\"\n    )\n\n    # List\n    list_tags = BashOperator(task_id=\"list_tags\", bash_command=\"echo list_tags\")\n\n    list_tags_result = BashOperator(task_id=\"list_tags_result\", bash_command=\"echo list_tags_result\")\n\n    # Lookup\n    lookup_entry = BashOperator(task_id=\"lookup_entry\", bash_command=\"echo lookup_entry\")\n\n    lookup_entry_result = BashOperator(task_id=\"lookup_entry_result\", bash_command=\"echo lookup_entry_result\")\n\n    # Rename\n    rename_tag_template_field = BashOperator(\n        task_id=\"rename_tag_template_field\", bash_command=\"echo rename_tag_template_field\"\n    )\n\n    # Search\n    search_catalog = PythonOperator(task_id=\"search_catalog\", python_callable=lambda: print(\"search_catalog\"))\n\n    search_catalog_result = BashOperator(\n        task_id=\"search_catalog_result\", bash_command=\"echo search_catalog_result\"\n    )\n\n    # Update\n    update_entry = BashOperator(task_id=\"update_entry\", bash_command=\"echo update_entry\")\n\n    update_tag = BashOperator(task_id=\"update_tag\", bash_command=\"echo update_tag\")\n\n    update_tag_template = BashOperator(task_id=\"update_tag_template\", bash_command=\"echo update_tag_template\")\n\n    update_tag_template_field = BashOperator(\n        task_id=\"update_tag_template_field\", bash_command=\"echo update_tag_template_field\"\n    )\n\n    # Create\n    create_tasks = [\n        create_entry_group,\n        create_entry_gcs,\n        create_tag_template,\n        create_tag_template_field,\n        create_tag,\n    ]\n    chain(*create_tasks)\n\n    create_entry_group >> delete_entry_group\n    create_entry_group >> create_entry_group_result\n    create_entry_group >> create_entry_group_result2\n\n    create_entry_gcs >> delete_entry\n    create_entry_gcs >> create_entry_gcs_result\n    create_entry_gcs >> create_entry_gcs_result2\n\n    create_tag_template >> delete_tag_template_field\n    create_tag_template >> create_tag_template_result\n    create_tag_template >> create_tag_template_result2\n\n    create_tag_template_field >> delete_tag_template_field\n    create_tag_template_field >> create_tag_template_field_result\n    create_tag_template_field >> create_tag_template_field_result2\n\n    create_tag >> delete_tag\n    create_tag >> create_tag_result\n    create_tag >> create_tag_result2\n\n    # Delete\n    delete_tasks = [\n        delete_tag,\n        delete_tag_template_field,\n        delete_tag_template,\n        delete_entry_group,\n        delete_entry,\n    ]\n    chain(*delete_tasks)\n\n    # Get\n    create_tag_template >> get_tag_template >> delete_tag_template\n    get_tag_template >> get_tag_template_result\n\n    create_entry_gcs >> get_entry >> delete_entry\n    get_entry >> get_entry_result\n\n    create_entry_group >> get_entry_group >> delete_entry_group\n    get_entry_group >> get_entry_group_result\n\n    # List\n    create_tag >> list_tags >> delete_tag\n    list_tags >> list_tags_result\n\n    # Lookup\n    create_entry_gcs >> lookup_entry >> delete_entry\n    lookup_entry >> lookup_entry_result\n\n    # Rename\n    create_tag_template_field >> rename_tag_template_field >> delete_tag_template_field\n\n    # Search\n    chain(create_tasks, search_catalog, delete_tasks)\n    search_catalog >> search_catalog_result\n\n    # Update\n    create_entry_gcs >> update_entry >> delete_entry\n    create_tag >> update_tag >> delete_tag\n    create_tag_template >> update_tag_template >> delete_tag_template\n    create_tag_template_field >> update_tag_template_field >> rename_tag_template_field\n','2021-02-18 18:41:43'),(19852427815871783,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_branch_python_dop_operator_3.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"\nExample DAG demonstrating the usage of BranchPythonOperator with depends_on_past=True, where tasks may be run\nor skipped on alternating runs.\n\"\"\"\n\nfrom airflow import DAG\nfrom airflow.operators.dummy import DummyOperator\nfrom airflow.operators.python import BranchPythonOperator\nfrom airflow.utils.dates import days_ago\n\nargs = {\n    \'owner\': \'airflow\',\n    \'depends_on_past\': True,\n}\n\ndag = DAG(\n    dag_id=\'example_branch_dop_operator_v3\',\n    schedule_interval=\'*/1 * * * *\',\n    start_date=days_ago(2),\n    default_args=args,\n    tags=[\'example\'],\n)\n\n\ndef should_run(**kwargs):\n    \"\"\"\n    Determine which dummy_task should be run based on if the execution date minute is even or odd.\n\n    :param dict kwargs: Context\n    :return: Id of the task to run\n    :rtype: str\n    \"\"\"\n    print(\n        \'------------- exec dttm = {} and minute = {}\'.format(\n            kwargs[\'execution_date\'], kwargs[\'execution_date\'].minute\n        )\n    )\n    if kwargs[\'execution_date\'].minute % 2 == 0:\n        return \"dummy_task_1\"\n    else:\n        return \"dummy_task_2\"\n\n\ncond = BranchPythonOperator(\n    task_id=\'condition\',\n    python_callable=should_run,\n    dag=dag,\n)\n\ndummy_task_1 = DummyOperator(task_id=\'dummy_task_1\', dag=dag)\ndummy_task_2 = DummyOperator(task_id=\'dummy_task_2\', dag=dag)\ncond >> [dummy_task_1, dummy_task_2]\n','2021-02-18 18:41:43'),(21650908380821859,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_trigger_controller_dag.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"\nExample usage of the TriggerDagRunOperator. This example holds 2 DAGs:\n1. 1st DAG (example_trigger_controller_dag) holds a TriggerDagRunOperator, which will trigger the 2nd DAG\n2. 2nd DAG (example_trigger_target_dag) which will be triggered by the TriggerDagRunOperator in the 1st DAG\n\"\"\"\nfrom airflow import DAG\nfrom airflow.operators.trigger_dagrun import TriggerDagRunOperator\nfrom airflow.utils.dates import days_ago\n\ndag = DAG(\n    dag_id=\"example_trigger_controller_dag\",\n    default_args={\"owner\": \"airflow\"},\n    start_date=days_ago(2),\n    schedule_interval=\"@once\",\n    tags=[\'example\'],\n)\n\ntrigger = TriggerDagRunOperator(\n    task_id=\"test_trigger_dagrun\",\n    trigger_dag_id=\"example_trigger_target_dag\",  # Ensure this equals the dag_id of the DAG to trigger\n    conf={\"message\": \"Hello World\"},\n    dag=dag,\n)\n','2021-02-18 18:41:43'),(21898232508061619,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_short_circuit_operator.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Example DAG demonstrating the usage of the ShortCircuitOperator.\"\"\"\nfrom airflow import DAG\nfrom airflow.models.baseoperator import chain\nfrom airflow.operators.dummy import DummyOperator\nfrom airflow.operators.python import ShortCircuitOperator\nfrom airflow.utils import dates\n\nargs = {\n    \'owner\': \'airflow\',\n}\n\ndag = DAG(\n    dag_id=\'example_short_circuit_operator\',\n    default_args=args,\n    start_date=dates.days_ago(2),\n    tags=[\'example\'],\n)\n\ncond_true = ShortCircuitOperator(\n    task_id=\'condition_is_True\',\n    python_callable=lambda: True,\n    dag=dag,\n)\n\ncond_false = ShortCircuitOperator(\n    task_id=\'condition_is_False\',\n    python_callable=lambda: False,\n    dag=dag,\n)\n\nds_true = [DummyOperator(task_id=\'true_\' + str(i), dag=dag) for i in [1, 2]]\nds_false = [DummyOperator(task_id=\'false_\' + str(i), dag=dag) for i in [1, 2]]\n\nchain(cond_true, *ds_true)\nchain(cond_false, *ds_false)\n','2021-02-18 18:41:43'),(27058878837141509,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_python_operator.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Example DAG demonstrating the usage of the PythonOperator.\"\"\"\nimport time\nfrom pprint import pprint\n\nfrom airflow import DAG\nfrom airflow.operators.python import PythonOperator, PythonVirtualenvOperator\nfrom airflow.utils.dates import days_ago\n\nargs = {\n    \'owner\': \'airflow\',\n}\n\ndag = DAG(\n    dag_id=\'example_python_operator\',\n    default_args=args,\n    schedule_interval=None,\n    start_date=days_ago(2),\n    tags=[\'example\'],\n)\n\n\n# [START howto_operator_python]\ndef print_context(ds, **kwargs):\n    \"\"\"Print the Airflow context and ds variable from the context.\"\"\"\n    pprint(kwargs)\n    print(ds)\n    return \'Whatever you return gets printed in the logs\'\n\n\nrun_this = PythonOperator(\n    task_id=\'print_the_context\',\n    python_callable=print_context,\n    dag=dag,\n)\n# [END howto_operator_python]\n\n\n# [START howto_operator_python_kwargs]\ndef my_sleeping_function(random_base):\n    \"\"\"This is a function that will run within the DAG execution\"\"\"\n    time.sleep(random_base)\n\n\n# Generate 5 sleeping tasks, sleeping from 0.0 to 0.4 seconds respectively\nfor i in range(5):\n    task = PythonOperator(\n        task_id=\'sleep_for_\' + str(i),\n        python_callable=my_sleeping_function,\n        op_kwargs={\'random_base\': float(i) / 10},\n        dag=dag,\n    )\n\n    run_this >> task\n# [END howto_operator_python_kwargs]\n\n\n# [START howto_operator_python_venv]\ndef callable_virtualenv():\n    \"\"\"\n    Example function that will be performed in a virtual environment.\n\n    Importing at the module level ensures that it will not attempt to import the\n    library before it is installed.\n    \"\"\"\n    from time import sleep\n\n    from colorama import Back, Fore, Style\n\n    print(Fore.RED + \'some red text\')\n    print(Back.GREEN + \'and with a green background\')\n    print(Style.DIM + \'and in dim text\')\n    print(Style.RESET_ALL)\n    for _ in range(10):\n        print(Style.DIM + \'Please wait...\', flush=True)\n        sleep(10)\n    print(\'Finished\')\n\n\nvirtualenv_task = PythonVirtualenvOperator(\n    task_id=\"virtualenv_python\",\n    python_callable=callable_virtualenv,\n    requirements=[\"colorama==0.4.0\"],\n    system_site_packages=False,\n    dag=dag,\n)\n# [END howto_operator_python_venv]\n','2021-02-18 18:41:43'),(35135952944146910,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/tutorial.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"\n### Tutorial Documentation\nDocumentation that goes along with the Airflow tutorial located\n[here](https://airflow.apache.org/tutorial.html)\n\"\"\"\n# [START tutorial]\n# [START import_module]\nfrom datetime import timedelta\n\n# The DAG object; we\'ll need this to instantiate a DAG\nfrom airflow import DAG\n\n# Operators; we need this to operate!\nfrom airflow.operators.bash import BashOperator\nfrom airflow.utils.dates import days_ago\n\n# [END import_module]\n\n# [START default_args]\n# These args will get passed on to each operator\n# You can override them on a per-task basis during operator initialization\ndefault_args = {\n    \'owner\': \'airflow\',\n    \'depends_on_past\': False,\n    \'email\': [\'airflow@example.com\'],\n    \'email_on_failure\': False,\n    \'email_on_retry\': False,\n    \'retries\': 1,\n    \'retry_delay\': timedelta(minutes=5),\n    # \'queue\': \'bash_queue\',\n    # \'pool\': \'backfill\',\n    # \'priority_weight\': 10,\n    # \'end_date\': datetime(2016, 1, 1),\n    # \'wait_for_downstream\': False,\n    # \'dag\': dag,\n    # \'sla\': timedelta(hours=2),\n    # \'execution_timeout\': timedelta(seconds=300),\n    # \'on_failure_callback\': some_function,\n    # \'on_success_callback\': some_other_function,\n    # \'on_retry_callback\': another_function,\n    # \'sla_miss_callback\': yet_another_function,\n    # \'trigger_rule\': \'all_success\'\n}\n# [END default_args]\n\n# [START instantiate_dag]\ndag = DAG(\n    \'tutorial\',\n    default_args=default_args,\n    description=\'A simple tutorial DAG\',\n    schedule_interval=timedelta(days=1),\n    start_date=days_ago(2),\n    tags=[\'example\'],\n)\n# [END instantiate_dag]\n\n# t1, t2 and t3 are examples of tasks created by instantiating operators\n# [START basic_task]\nt1 = BashOperator(\n    task_id=\'print_date\',\n    bash_command=\'date\',\n    dag=dag,\n)\n\nt2 = BashOperator(\n    task_id=\'sleep\',\n    depends_on_past=False,\n    bash_command=\'sleep 5\',\n    retries=3,\n    dag=dag,\n)\n# [END basic_task]\n\n# [START documentation]\ndag.doc_md = __doc__\n\nt1.doc_md = \"\"\"\\\n#### Task Documentation\nYou can document your task using the attributes `doc_md` (markdown),\n`doc` (plain text), `doc_rst`, `doc_json`, `doc_yaml` which gets\nrendered in the UI\'s Task Instance Details page.\n![img](http://montcs.bloomu.edu/~bobmon/Semesters/2012-01/491/import%20soul.png)\n\"\"\"\n# [END documentation]\n\n# [START jinja_template]\ntemplated_command = \"\"\"\n{% for i in range(5) %}\n    echo \"{{ ds }}\"\n    echo \"{{ macros.ds_add(ds, 7)}}\"\n    echo \"{{ params.my_param }}\"\n{% endfor %}\n\"\"\"\n\nt3 = BashOperator(\n    task_id=\'templated\',\n    depends_on_past=False,\n    bash_command=templated_command,\n    params={\'my_param\': \'Parameter I passed in\'},\n    dag=dag,\n)\n# [END jinja_template]\n\nt1 >> [t2, t3]\n# [END tutorial]\n','2021-02-18 18:41:43'),(36991529475418274,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_skip_dag.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Example DAG demonstrating the DummyOperator and a custom DummySkipOperator which skips by default.\"\"\"\n\nfrom airflow import DAG\nfrom airflow.exceptions import AirflowSkipException\nfrom airflow.operators.dummy import DummyOperator\nfrom airflow.utils.dates import days_ago\n\nargs = {\n    \'owner\': \'airflow\',\n}\n\n\n# Create some placeholder operators\nclass DummySkipOperator(DummyOperator):\n    \"\"\"Dummy operator which always skips the task.\"\"\"\n\n    ui_color = \'#e8b7e4\'\n\n    def execute(self, context):\n        raise AirflowSkipException\n\n\ndef create_test_pipeline(suffix, trigger_rule, dag_):\n    \"\"\"\n    Instantiate a number of operators for the given DAG.\n\n    :param str suffix: Suffix to append to the operator task_ids\n    :param str trigger_rule: TriggerRule for the join task\n    :param DAG dag_: The DAG to run the operators on\n    \"\"\"\n    skip_operator = DummySkipOperator(task_id=f\'skip_operator_{suffix}\', dag=dag_)\n    always_true = DummyOperator(task_id=f\'always_true_{suffix}\', dag=dag_)\n    join = DummyOperator(task_id=trigger_rule, dag=dag_, trigger_rule=trigger_rule)\n    final = DummyOperator(task_id=f\'final_{suffix}\', dag=dag_)\n\n    skip_operator >> join\n    always_true >> join\n    join >> final\n\n\ndag = DAG(dag_id=\'example_skip_dag\', default_args=args, start_date=days_ago(2), tags=[\'example\'])\ncreate_test_pipeline(\'1\', \'all_success\', dag)\ncreate_test_pipeline(\'2\', \'one_success\', dag)\n','2021-02-18 18:41:43'),(38682307841905099,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_dag_decorator.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\nfrom typing import Any, Dict\n\nimport requests\n\nfrom airflow.decorators import dag, task\nfrom airflow.models.baseoperator import BaseOperator\nfrom airflow.operators.email import EmailOperator\nfrom airflow.utils.dates import days_ago\n\nDEFAULT_ARGS = {\"owner\": \"airflow\"}\n\n\nclass GetRequestOperator(BaseOperator):\n    \"\"\"Custom operator to sand GET request to provided url\"\"\"\n\n    def __init__(self, *, url: str, **kwargs):\n        super().__init__(**kwargs)\n        self.url = url\n\n    def execute(self, context):\n        return requests.get(self.url).json()\n\n\n# [START dag_decorator_usage]\n@dag(default_args=DEFAULT_ARGS, schedule_interval=None, start_date=days_ago(2), tags=[\'example\'])\ndef example_dag_decorator(email: str = \'example@example.com\'):\n    \"\"\"\n    DAG to send server IP to email.\n\n    :param email: Email to send IP to. Defaults to example@example.com.\n    :type email: str\n    \"\"\"\n    get_ip = GetRequestOperator(task_id=\'get_ip\', url=\"http://httpbin.org/get\")\n\n    @task(multiple_outputs=True)\n    def prepare_email(raw_json: Dict[str, Any]) -> Dict[str, str]:\n        external_ip = raw_json[\'origin\']\n        return {\n            \'subject\': f\'Server connected from {external_ip}\',\n            \'body\': f\'Seems like today your server executing Airflow is connected from IP {external_ip}<br>\',\n        }\n\n    email_info = prepare_email(get_ip.output)\n\n    EmailOperator(\n        task_id=\'send_email\', to=email, subject=email_info[\'subject\'], html_content=email_info[\'body\']\n    )\n\n\ndag = example_dag_decorator()\n# [END dag_decorator_usage]\n','2021-02-18 18:41:43'),(39108862050874828,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_latest_only_with_trigger.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\"\"\"\nExample LatestOnlyOperator and TriggerRule interactions\n\"\"\"\n\n# [START example]\nimport datetime as dt\n\nfrom airflow import DAG\nfrom airflow.operators.dummy import DummyOperator\nfrom airflow.operators.latest_only import LatestOnlyOperator\nfrom airflow.utils.dates import days_ago\nfrom airflow.utils.trigger_rule import TriggerRule\n\ndag = DAG(\n    dag_id=\'latest_only_with_trigger\',\n    schedule_interval=dt.timedelta(hours=4),\n    start_date=days_ago(2),\n    tags=[\'example3\'],\n)\n\nlatest_only = LatestOnlyOperator(task_id=\'latest_only\', dag=dag)\ntask1 = DummyOperator(task_id=\'task1\', dag=dag)\ntask2 = DummyOperator(task_id=\'task2\', dag=dag)\ntask3 = DummyOperator(task_id=\'task3\', dag=dag)\ntask4 = DummyOperator(task_id=\'task4\', dag=dag, trigger_rule=TriggerRule.ALL_DONE)\n\nlatest_only >> task1 >> [task3, task4]\ntask2 >> [task3, task4]\n# [END example]\n','2021-02-18 18:41:43'),(46941702439313704,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_subdag_operator.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Example DAG demonstrating the usage of the SubDagOperator.\"\"\"\n\n# [START example_subdag_operator]\nfrom airflow import DAG\nfrom airflow.example_dags.subdags.subdag import subdag\nfrom airflow.operators.dummy import DummyOperator\nfrom airflow.operators.subdag import SubDagOperator\nfrom airflow.utils.dates import days_ago\n\nDAG_NAME = \'example_subdag_operator\'\n\nargs = {\n    \'owner\': \'airflow\',\n}\n\ndag = DAG(\n    dag_id=DAG_NAME, default_args=args, start_date=days_ago(2), schedule_interval=\"@once\", tags=[\'example\']\n)\n\nstart = DummyOperator(\n    task_id=\'start\',\n    dag=dag,\n)\n\nsection_1 = SubDagOperator(\n    task_id=\'section-1\',\n    subdag=subdag(DAG_NAME, \'section-1\', args),\n    dag=dag,\n)\n\nsome_other_task = DummyOperator(\n    task_id=\'some-other-task\',\n    dag=dag,\n)\n\nsection_2 = SubDagOperator(\n    task_id=\'section-2\',\n    subdag=subdag(DAG_NAME, \'section-2\', args),\n    dag=dag,\n)\n\nend = DummyOperator(\n    task_id=\'end\',\n    dag=dag,\n)\n\nstart >> section_1 >> some_other_task >> section_2 >> end\n# [END example_subdag_operator]\n','2021-02-18 18:41:43'),(48679579918738237,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_external_task_marker_dag.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"\nExample DAG demonstrating setting up inter-DAG dependencies using ExternalTaskSensor and\nExternalTaskMarker\n\nIn this example, child_task1 in example_external_task_marker_child depends on parent_task in\nexample_external_task_marker_parent. When parent_task is cleared with \"Recursive\" selected,\nthe presence of ExternalTaskMarker tells Airflow to clear child_task1 and its\ndownstream tasks.\n\nExternalTaskSensor will keep poking for the status of remote ExternalTaskMarker task at a regular\ninterval till one of the following will happen:\n1. ExternalTaskMarker reaches the states mentioned in the allowed_states list\n    In this case, ExternalTaskSensor will exit with a succes status code\n2. ExternalTaskMarker reaches the states mentioned in the failed_states list\n    In this case, ExternalTaskSensor will raise an AirflowException and user need to handle this\n    with multiple downstream tasks\n3. ExternalTaskSensor times out\n    In this case, ExternalTaskSensor will raise AirflowSkipException or AirflowSensorTimeout\n    exception\n\"\"\"\n\nimport datetime\n\nfrom airflow import DAG\nfrom airflow.operators.dummy import DummyOperator\nfrom airflow.sensors.external_task import ExternalTaskMarker, ExternalTaskSensor\n\nstart_date = datetime.datetime(2015, 1, 1)\n\nwith DAG(\n    dag_id=\"example_external_task_marker_parent\",\n    start_date=start_date,\n    schedule_interval=None,\n    tags=[\'example2\'],\n) as parent_dag:\n    # [START howto_operator_external_task_marker]\n    parent_task = ExternalTaskMarker(\n        task_id=\"parent_task\",\n        external_dag_id=\"example_external_task_marker_child\",\n        external_task_id=\"child_task1\",\n    )\n    # [END howto_operator_external_task_marker]\n\nwith DAG(\n    dag_id=\"example_external_task_marker_child\",\n    start_date=start_date,\n    schedule_interval=None,\n    tags=[\'example2\'],\n) as child_dag:\n    # [START howto_operator_external_task_sensor]\n    child_task1 = ExternalTaskSensor(\n        task_id=\"child_task1\",\n        external_dag_id=parent_dag.dag_id,\n        external_task_id=parent_task.task_id,\n        timeout=600,\n        allowed_states=[\'success\'],\n        failed_states=[\'failed\', \'skipped\'],\n        mode=\"reschedule\",\n    )\n    # [END howto_operator_external_task_sensor]\n    child_task2 = DummyOperator(task_id=\"child_task2\")\n    child_task1 >> child_task2\n','2021-02-18 18:41:43'),(55646239417546062,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/test_utils.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\"\"\"Used for unit tests\"\"\"\nfrom airflow import DAG\nfrom airflow.operators.bash import BashOperator\nfrom airflow.utils.dates import days_ago\n\ndag = DAG(dag_id=\'test_utils\', schedule_interval=None, tags=[\'example\'])\n\ntask = BashOperator(\n    task_id=\'sleeps_forever\',\n    dag=dag,\n    bash_command=\"sleep 10000000000\",\n    start_date=days_ago(2),\n    owner=\'airflow\',\n)\n','2021-02-18 18:41:43'),(58016228317945597,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_bash_operator.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Example DAG demonstrating the usage of the BashOperator.\"\"\"\n\nfrom datetime import timedelta\n\nfrom airflow import DAG\nfrom airflow.operators.bash import BashOperator\nfrom airflow.operators.dummy import DummyOperator\nfrom airflow.utils.dates import days_ago\n\nargs = {\n    \'owner\': \'airflow\',\n}\n\ndag = DAG(\n    dag_id=\'example_bash_operator\',\n    default_args=args,\n    schedule_interval=\'0 0 * * *\',\n    start_date=days_ago(2),\n    dagrun_timeout=timedelta(minutes=60),\n    tags=[\'example\', \'example2\'],\n    params={\"example_key\": \"example_value\"},\n)\n\nrun_this_last = DummyOperator(\n    task_id=\'run_this_last\',\n    dag=dag,\n)\n\n# [START howto_operator_bash]\nrun_this = BashOperator(\n    task_id=\'run_after_loop\',\n    bash_command=\'echo 1\',\n    dag=dag,\n)\n# [END howto_operator_bash]\n\nrun_this >> run_this_last\n\nfor i in range(3):\n    task = BashOperator(\n        task_id=\'runme_\' + str(i),\n        bash_command=\'echo \"{{ task_instance_key_str }}\" && sleep 1\',\n        dag=dag,\n    )\n    task >> run_this\n\n# [START howto_operator_bash_template]\nalso_run_this = BashOperator(\n    task_id=\'also_run_this\',\n    bash_command=\'echo \"run_id={{ run_id }} | dag_run={{ dag_run }}\"\',\n    dag=dag,\n)\n# [END howto_operator_bash_template]\nalso_run_this >> run_this_last\n\nif __name__ == \"__main__\":\n    dag.cli()\n','2021-02-18 18:41:43'),(58752526798574026,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_latest_only.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Example of the LatestOnlyOperator\"\"\"\n\nimport datetime as dt\n\nfrom airflow import DAG\nfrom airflow.operators.dummy import DummyOperator\nfrom airflow.operators.latest_only import LatestOnlyOperator\nfrom airflow.utils.dates import days_ago\n\ndag = DAG(\n    dag_id=\'latest_only\',\n    schedule_interval=dt.timedelta(hours=4),\n    start_date=days_ago(2),\n    tags=[\'example2\', \'example3\'],\n)\n\nlatest_only = LatestOnlyOperator(task_id=\'latest_only\', dag=dag)\ntask1 = DummyOperator(task_id=\'task1\', dag=dag)\n\nlatest_only >> task1\n','2021-02-18 18:41:43'),(62564788872744106,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_kubernetes_executor.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\"\"\"\nThis is an example dag for using the Kubernetes Executor.\n\"\"\"\nimport os\n\nfrom airflow import DAG\nfrom airflow.example_dags.libs.helper import print_stuff\nfrom airflow.operators.python import PythonOperator\nfrom airflow.utils.dates import days_ago\n\nargs = {\n    \'owner\': \'airflow\',\n}\n\nwith DAG(\n    dag_id=\'example_kubernetes_executor\',\n    default_args=args,\n    schedule_interval=None,\n    start_date=days_ago(2),\n    tags=[\'example\', \'example2\'],\n) as dag:\n\n    affinity = {\n        \'podAntiAffinity\': {\n            \'requiredDuringSchedulingIgnoredDuringExecution\': [\n                {\n                    \'topologyKey\': \'kubernetes.io/hostname\',\n                    \'labelSelector\': {\n                        \'matchExpressions\': [{\'key\': \'app\', \'operator\': \'In\', \'values\': [\'airflow\']}]\n                    },\n                }\n            ]\n        }\n    }\n\n    tolerations = [{\'key\': \'dedicated\', \'operator\': \'Equal\', \'value\': \'airflow\'}]\n\n    def assert_zip_binary():\n        \"\"\"\n        Checks whether Zip is installed.\n\n        :raises SystemError: if zip is not installed\n        \"\"\"\n        return_code = os.system(\"zip\")\n        if return_code != 0:\n            raise SystemError(\"The zip binary is not found\")\n\n    # You don\'t have to use any special KubernetesExecutor configuration if you don\'t want to\n    start_task = PythonOperator(task_id=\"start_task\", python_callable=print_stuff)\n\n    # But you can if you want to\n    one_task = PythonOperator(\n        task_id=\"one_task\",\n        python_callable=print_stuff,\n        executor_config={\"KubernetesExecutor\": {\"image\": \"airflow/ci:latest\"}},\n    )\n\n    # Use the zip binary, which is only found in this special docker image\n    two_task = PythonOperator(\n        task_id=\"two_task\",\n        python_callable=assert_zip_binary,\n        executor_config={\"KubernetesExecutor\": {\"image\": \"airflow/ci_zip:latest\"}},\n    )\n\n    # Limit resources on this operator/task with node affinity & tolerations\n    three_task = PythonOperator(\n        task_id=\"three_task\",\n        python_callable=print_stuff,\n        executor_config={\n            \"KubernetesExecutor\": {\n                \"request_memory\": \"128Mi\",\n                \"limit_memory\": \"128Mi\",\n                \"tolerations\": tolerations,\n                \"affinity\": affinity,\n            }\n        },\n    )\n\n    # Add arbitrary labels to worker pods\n    four_task = PythonOperator(\n        task_id=\"four_task\",\n        python_callable=print_stuff,\n        executor_config={\"KubernetesExecutor\": {\"labels\": {\"foo\": \"bar\"}}},\n    )\n\n    start_task >> [one_task, two_task, three_task, four_task]\n','2021-02-18 18:41:43'),(68325907473709585,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_task_group.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Example DAG demonstrating the usage of the TaskGroup.\"\"\"\n\nfrom airflow.models.dag import DAG\nfrom airflow.operators.bash import BashOperator\nfrom airflow.operators.dummy import DummyOperator\nfrom airflow.utils.dates import days_ago\nfrom airflow.utils.task_group import TaskGroup\n\n# [START howto_task_group]\nwith DAG(dag_id=\"example_task_group\", start_date=days_ago(2), tags=[\"example\"]) as dag:\n    start = DummyOperator(task_id=\"start\")\n\n    # [START howto_task_group_section_1]\n    with TaskGroup(\"section_1\", tooltip=\"Tasks for section_1\") as section_1:\n        task_1 = DummyOperator(task_id=\"task_1\")\n        task_2 = BashOperator(task_id=\"task_2\", bash_command=\'echo 1\')\n        task_3 = DummyOperator(task_id=\"task_3\")\n\n        task_1 >> [task_2, task_3]\n    # [END howto_task_group_section_1]\n\n    # [START howto_task_group_section_2]\n    with TaskGroup(\"section_2\", tooltip=\"Tasks for section_2\") as section_2:\n        task_1 = DummyOperator(task_id=\"task_1\")\n\n        # [START howto_task_group_inner_section_2]\n        with TaskGroup(\"inner_section_2\", tooltip=\"Tasks for inner_section2\") as inner_section_2:\n            task_2 = BashOperator(task_id=\"task_2\", bash_command=\'echo 1\')\n            task_3 = DummyOperator(task_id=\"task_3\")\n            task_4 = DummyOperator(task_id=\"task_4\")\n\n            [task_2, task_3] >> task_4\n        # [END howto_task_group_inner_section_2]\n\n    # [END howto_task_group_section_2]\n\n    end = DummyOperator(task_id=\'end\')\n\n    start >> section_1 >> section_2 >> end\n# [END howto_task_group]\n','2021-02-18 18:41:43'),(70310561898464699,'/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_branch_operator.py','#\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#   http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n\n\"\"\"Example DAG demonstrating the usage of the BranchPythonOperator.\"\"\"\n\nimport random\n\nfrom airflow import DAG\nfrom airflow.operators.dummy import DummyOperator\nfrom airflow.operators.python import BranchPythonOperator\nfrom airflow.utils.dates import days_ago\n\nargs = {\n    \'owner\': \'airflow\',\n}\n\ndag = DAG(\n    dag_id=\'example_branch_operator\',\n    default_args=args,\n    start_date=days_ago(2),\n    schedule_interval=\"@daily\",\n    tags=[\'example\', \'example2\'],\n)\n\nrun_this_first = DummyOperator(\n    task_id=\'run_this_first\',\n    dag=dag,\n)\n\noptions = [\'branch_a\', \'branch_b\', \'branch_c\', \'branch_d\']\n\nbranching = BranchPythonOperator(\n    task_id=\'branching\',\n    python_callable=lambda: random.choice(options),\n    dag=dag,\n)\nrun_this_first >> branching\n\njoin = DummyOperator(\n    task_id=\'join\',\n    trigger_rule=\'none_failed_or_skipped\',\n    dag=dag,\n)\n\nfor option in options:\n    t = DummyOperator(\n        task_id=option,\n        dag=dag,\n    )\n\n    dummy_follow = DummyOperator(\n        task_id=\'follow_\' + option,\n        dag=dag,\n    )\n\n    branching >> t >> dummy_follow >> join\n','2021-02-18 18:41:43');
/*!40000 ALTER TABLE `dag_code` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dag_pickle`
--

DROP TABLE IF EXISTS `dag_pickle`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `dag_pickle` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pickle` blob,
  `created_dttm` timestamp(6) NULL DEFAULT NULL,
  `pickle_hash` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dag_pickle`
--

LOCK TABLES `dag_pickle` WRITE;
/*!40000 ALTER TABLE `dag_pickle` DISABLE KEYS */;
/*!40000 ALTER TABLE `dag_pickle` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dag_run`
--

DROP TABLE IF EXISTS `dag_run`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `dag_run` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `dag_id` varchar(250) COLLATE utf8_unicode_ci DEFAULT NULL,
  `execution_date` timestamp(6) NULL DEFAULT NULL,
  `state` varchar(50) COLLATE utf8_unicode_ci DEFAULT NULL,
  `run_id` varchar(250) COLLATE utf8_unicode_ci DEFAULT NULL,
  `external_trigger` tinyint(1) DEFAULT NULL,
  `conf` blob,
  `end_date` timestamp(6) NULL DEFAULT NULL,
  `start_date` timestamp(6) NULL DEFAULT NULL,
  `run_type` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `last_scheduling_decision` timestamp(6) NULL DEFAULT NULL,
  `dag_hash` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
  `creating_job_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `dag_id` (`dag_id`,`execution_date`),
  UNIQUE KEY `dag_id_2` (`dag_id`,`run_id`),
  KEY `dag_id_state` (`dag_id`,`state`),
  KEY `idx_last_scheduling_decision` (`last_scheduling_decision`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dag_run`
--

LOCK TABLES `dag_run` WRITE;
/*!40000 ALTER TABLE `dag_run` DISABLE KEYS */;
/*!40000 ALTER TABLE `dag_run` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `dag_tag`
--

DROP TABLE IF EXISTS `dag_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `dag_tag` (
  `name` varchar(100) COLLATE utf8_unicode_ci NOT NULL,
  `dag_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`name`,`dag_id`),
  KEY `dag_id` (`dag_id`),
  CONSTRAINT `dag_tag_ibfk_1` FOREIGN KEY (`dag_id`) REFERENCES `dag` (`dag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `dag_tag`
--

LOCK TABLES `dag_tag` WRITE;
/*!40000 ALTER TABLE `dag_tag` DISABLE KEYS */;
INSERT INTO `dag_tag` VALUES ('example','example_bash_operator'),('example2','example_bash_operator'),('example','example_branch_dop_operator_v3'),('example','example_branch_operator'),('example2','example_branch_operator'),('example','example_complex'),('example2','example_complex'),('example3','example_complex'),('example','example_dag_decorator'),('example2','example_external_task_marker_child'),('example2','example_external_task_marker_parent'),('example','example_kubernetes_executor'),('example2','example_kubernetes_executor'),('example','example_nested_branch_dag'),('example','example_passing_params_via_test_command'),('example','example_python_operator'),('example','example_short_circuit_operator'),('example','example_skip_dag'),('example','example_subdag_operator'),('example','example_task_group'),('example','example_trigger_controller_dag'),('example','example_trigger_target_dag'),('example','example_xcom'),('example','example_xcom_args'),('example','example_xcom_args_with_operators'),('example2','latest_only'),('example3','latest_only'),('example3','latest_only_with_trigger'),('example','test_utils'),('example','tutorial'),('example','tutorial_etl_dag'),('example','tutorial_taskflow_api_etl');
/*!40000 ALTER TABLE `dag_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `import_error`
--

DROP TABLE IF EXISTS `import_error`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `import_error` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `timestamp` timestamp(6) NULL DEFAULT NULL,
  `filename` varchar(1024) COLLATE utf8_unicode_ci DEFAULT NULL,
  `stacktrace` text COLLATE utf8_unicode_ci,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `import_error`
--

LOCK TABLES `import_error` WRITE;
/*!40000 ALTER TABLE `import_error` DISABLE KEYS */;
/*!40000 ALTER TABLE `import_error` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `job`
--

DROP TABLE IF EXISTS `job`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `job` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `dag_id` varchar(250) COLLATE utf8_unicode_ci DEFAULT NULL,
  `state` varchar(20) COLLATE utf8_unicode_ci DEFAULT NULL,
  `job_type` varchar(30) COLLATE utf8_unicode_ci DEFAULT NULL,
  `start_date` timestamp(6) NULL DEFAULT NULL,
  `end_date` timestamp(6) NULL DEFAULT NULL,
  `latest_heartbeat` timestamp(6) NULL DEFAULT NULL,
  `executor_class` varchar(500) COLLATE utf8_unicode_ci DEFAULT NULL,
  `hostname` varchar(500) COLLATE utf8_unicode_ci DEFAULT NULL,
  `unixname` varchar(1000) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `job_type_heart` (`job_type`,`latest_heartbeat`),
  KEY `idx_job_state_heartbeat` (`state`,`latest_heartbeat`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `job`
--

LOCK TABLES `job` WRITE;
/*!40000 ALTER TABLE `job` DISABLE KEYS */;
/*!40000 ALTER TABLE `job` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `log`
--

DROP TABLE IF EXISTS `log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `dttm` timestamp(6) NULL DEFAULT NULL,
  `dag_id` varchar(250) COLLATE utf8_unicode_ci DEFAULT NULL,
  `task_id` varchar(250) COLLATE utf8_unicode_ci DEFAULT NULL,
  `event` varchar(30) COLLATE utf8_unicode_ci DEFAULT NULL,
  `execution_date` timestamp(6) NULL DEFAULT NULL,
  `owner` varchar(500) COLLATE utf8_unicode_ci DEFAULT NULL,
  `extra` text COLLATE utf8_unicode_ci,
  PRIMARY KEY (`id`),
  KEY `idx_log_dag` (`dag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `log`
--

LOCK TABLES `log` WRITE;
/*!40000 ALTER TABLE `log` DISABLE KEYS */;
/*!40000 ALTER TABLE `log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `rendered_task_instance_fields`
--

DROP TABLE IF EXISTS `rendered_task_instance_fields`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `rendered_task_instance_fields` (
  `dag_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `task_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `execution_date` timestamp(6) NOT NULL,
  `rendered_fields` json NOT NULL,
  `k8s_pod_yaml` json DEFAULT NULL,
  PRIMARY KEY (`dag_id`,`task_id`,`execution_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `rendered_task_instance_fields`
--

LOCK TABLES `rendered_task_instance_fields` WRITE;
/*!40000 ALTER TABLE `rendered_task_instance_fields` DISABLE KEYS */;
/*!40000 ALTER TABLE `rendered_task_instance_fields` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sensor_instance`
--

DROP TABLE IF EXISTS `sensor_instance`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sensor_instance` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `task_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `dag_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `execution_date` timestamp(6) NOT NULL,
  `state` varchar(20) COLLATE utf8_unicode_ci DEFAULT NULL,
  `try_number` int(11) DEFAULT NULL,
  `start_date` timestamp(6) NULL DEFAULT NULL,
  `operator` varchar(1000) COLLATE utf8_unicode_ci NOT NULL,
  `op_classpath` varchar(1000) COLLATE utf8_unicode_ci NOT NULL,
  `hashcode` bigint(20) NOT NULL,
  `shardcode` int(11) NOT NULL,
  `poke_context` text COLLATE utf8_unicode_ci NOT NULL,
  `execution_context` text COLLATE utf8_unicode_ci,
  `created_at` timestamp(6) NOT NULL,
  `updated_at` timestamp(6) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `ti_primary_key` (`dag_id`,`task_id`,`execution_date`),
  KEY `si_hashcode` (`hashcode`),
  KEY `si_shardcode` (`shardcode`),
  KEY `si_state_shard` (`state`,`shardcode`),
  KEY `si_updated_at` (`updated_at`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sensor_instance`
--

LOCK TABLES `sensor_instance` WRITE;
/*!40000 ALTER TABLE `sensor_instance` DISABLE KEYS */;
/*!40000 ALTER TABLE `sensor_instance` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `serialized_dag`
--

DROP TABLE IF EXISTS `serialized_dag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `serialized_dag` (
  `dag_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `fileloc` varchar(2000) COLLATE utf8_unicode_ci NOT NULL,
  `fileloc_hash` bigint(20) NOT NULL,
  `data` json NOT NULL,
  `last_updated` timestamp(6) NOT NULL,
  `dag_hash` varchar(32) COLLATE utf8_unicode_ci NOT NULL DEFAULT 'Hash not calculated yet',
  PRIMARY KEY (`dag_id`),
  KEY `idx_fileloc_hash` (`fileloc_hash`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `serialized_dag`
--

LOCK TABLES `serialized_dag` WRITE;
/*!40000 ALTER TABLE `serialized_dag` DISABLE KEYS */;
INSERT INTO `serialized_dag` VALUES ('example_bash_operator','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_bash_operator.py',58016228317945597,'{\"dag\": {\"tags\": [\"example\", \"example2\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"run_this_last\", \"owner\": \"airflow\", \"params\": {\"example_key\": \"example_value\"}, \"_inlets\": [], \"task_id\": \"run_this_last\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"run_after_loop\", \"owner\": \"airflow\", \"params\": {\"example_key\": \"example_value\"}, \"_inlets\": [], \"task_id\": \"run_after_loop\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo 1\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"run_this_last\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"runme_0\", \"owner\": \"airflow\", \"params\": {\"example_key\": \"example_value\"}, \"_inlets\": [], \"task_id\": \"runme_0\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo \\\"{{ task_instance_key_str }}\\\" && sleep 1\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"run_after_loop\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"runme_1\", \"owner\": \"airflow\", \"params\": {\"example_key\": \"example_value\"}, \"_inlets\": [], \"task_id\": \"runme_1\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo \\\"{{ task_instance_key_str }}\\\" && sleep 1\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"run_after_loop\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"runme_2\", \"owner\": \"airflow\", \"params\": {\"example_key\": \"example_value\"}, \"_inlets\": [], \"task_id\": \"runme_2\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo \\\"{{ task_instance_key_str }}\\\" && sleep 1\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"run_after_loop\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"also_run_this\", \"owner\": \"airflow\", \"params\": {\"example_key\": \"example_value\"}, \"_inlets\": [], \"task_id\": \"also_run_this\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo \\\"run_id={{ run_id }} | dag_run={{ dag_run }}\\\"\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"run_this_last\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}], \"params\": {\"example_key\": \"example_value\"}, \"_dag_id\": \"example_bash_operator\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_bash_operator.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"runme_0\": [\"operator\", \"runme_0\"], \"runme_1\": [\"operator\", \"runme_1\"], \"runme_2\": [\"operator\", \"runme_2\"], \"also_run_this\": [\"operator\", \"also_run_this\"], \"run_this_last\": [\"operator\", \"run_this_last\"], \"run_after_loop\": [\"operator\", \"run_after_loop\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"dagrun_timeout\": 3600, \"schedule_interval\": \"0 0 * * *\"}, \"__version\": 1}','2021-02-18 18:41:42.438239','cc6f22aafcd8e69636a4fce387d817a9'),('example_branch_dop_operator_v3','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_branch_python_dop_operator_3.py',19852427815871783,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"condition\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"condition\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"BranchPythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"depends_on_past\": true, \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"dummy_task_2\", \"dummy_task_1\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"dummy_task_1\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"dummy_task_1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"depends_on_past\": true, \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"dummy_task_2\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"dummy_task_2\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"depends_on_past\": true, \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}], \"_dag_id\": \"example_branch_dop_operator_v3\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_branch_python_dop_operator_3.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"condition\": [\"operator\", \"condition\"], \"dummy_task_1\": [\"operator\", \"dummy_task_1\"], \"dummy_task_2\": [\"operator\", \"dummy_task_2\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\", \"depends_on_past\": true}, \"__type\": \"dict\"}, \"schedule_interval\": \"*/1 * * * *\"}, \"__version\": 1}','2021-02-18 18:41:42.525341','55fbe4ebaf167cea39588b585847e374'),('example_branch_operator','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_branch_operator.py',70310561898464699,'{\"dag\": {\"tags\": [\"example\", \"example2\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"run_this_first\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"run_this_first\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"branching\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"branching\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"branching\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"BranchPythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"branch_b\", \"branch_d\", \"branch_a\", \"branch_c\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"join\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"join\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"trigger_rule\": \"none_failed_or_skipped\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"branch_a\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"branch_a\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"follow_branch_a\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"follow_branch_a\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"follow_branch_a\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"join\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"branch_b\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"branch_b\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"follow_branch_b\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"follow_branch_b\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"follow_branch_b\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"join\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"branch_c\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"branch_c\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"follow_branch_c\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"follow_branch_c\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"follow_branch_c\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"join\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"branch_d\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"branch_d\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"follow_branch_d\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"follow_branch_d\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"follow_branch_d\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"join\"], \"template_fields_renderers\": {}}], \"_dag_id\": \"example_branch_operator\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_branch_operator.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"join\": [\"operator\", \"join\"], \"branch_a\": [\"operator\", \"branch_a\"], \"branch_b\": [\"operator\", \"branch_b\"], \"branch_c\": [\"operator\", \"branch_c\"], \"branch_d\": [\"operator\", \"branch_d\"], \"branching\": [\"operator\", \"branching\"], \"run_this_first\": [\"operator\", \"run_this_first\"], \"follow_branch_a\": [\"operator\", \"follow_branch_a\"], \"follow_branch_b\": [\"operator\", \"follow_branch_b\"], \"follow_branch_c\": [\"operator\", \"follow_branch_c\"], \"follow_branch_d\": [\"operator\", \"follow_branch_d\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": \"@daily\"}, \"__version\": 1}','2021-02-18 18:41:42.365884','64c38944112cfb8c3ad2a374bc655add'),('example_complex','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_complex.py',18964047695475291,'{\"dag\": {\"tags\": [\"example\", \"example2\", \"example3\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"create_entry_group\", \"_inlets\": [], \"task_id\": \"create_entry_group\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_entry_group\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"create_entry_group_result\", \"search_catalog\", \"delete_entry_group\", \"create_entry_gcs\", \"create_entry_group_result2\", \"get_entry_group\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_entry_group_result\", \"_inlets\": [], \"task_id\": \"create_entry_group_result\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_entry_group_result\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_entry_group_result2\", \"_inlets\": [], \"task_id\": \"create_entry_group_result2\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_entry_group_result2\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_entry_gcs\", \"_inlets\": [], \"task_id\": \"create_entry_gcs\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_entry_gcs\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"search_catalog\", \"create_entry_gcs_result\", \"get_entry\", \"create_entry_gcs_result2\", \"create_tag_template\", \"lookup_entry\", \"update_entry\", \"delete_entry\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_entry_gcs_result\", \"_inlets\": [], \"task_id\": \"create_entry_gcs_result\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_entry_gcs_result\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_entry_gcs_result2\", \"_inlets\": [], \"task_id\": \"create_entry_gcs_result2\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_entry_gcs_result2\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_tag\", \"_inlets\": [], \"task_id\": \"create_tag\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_tag\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"search_catalog\", \"update_tag\", \"list_tags\", \"delete_tag\", \"create_tag_result\", \"create_tag_result2\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_tag_result\", \"_inlets\": [], \"task_id\": \"create_tag_result\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_tag_result\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_tag_result2\", \"_inlets\": [], \"task_id\": \"create_tag_result2\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_tag_result2\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_tag_template\", \"_inlets\": [], \"task_id\": \"create_tag_template\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_tag_template\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"search_catalog\", \"delete_tag_template_field\", \"create_tag_template_result2\", \"create_tag_template_field\", \"get_tag_template\", \"create_tag_template_result\", \"update_tag_template\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_tag_template_result\", \"_inlets\": [], \"task_id\": \"create_tag_template_result\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_tag_template_result\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_tag_template_result2\", \"_inlets\": [], \"task_id\": \"create_tag_template_result2\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_tag_template_result2\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_tag_template_field\", \"_inlets\": [], \"task_id\": \"create_tag_template_field\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_tag_template_field\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"search_catalog\", \"rename_tag_template_field\", \"delete_tag_template_field\", \"create_tag\", \"create_tag_template_field_result\", \"create_tag_template_field_result2\", \"update_tag_template_field\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_tag_template_field_result\", \"_inlets\": [], \"task_id\": \"create_tag_template_field_result\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_tag_template_field_result\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"create_tag_template_field_result2\", \"_inlets\": [], \"task_id\": \"create_tag_template_field_result2\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo create_tag_template_field_result\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"delete_entry\", \"_inlets\": [], \"task_id\": \"delete_entry\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo delete_entry\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"delete_entry_group\", \"_inlets\": [], \"task_id\": \"delete_entry_group\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo delete_entry_group\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"delete_entry\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"delete_tag\", \"_inlets\": [], \"task_id\": \"delete_tag\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo delete_tag\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"delete_tag_template_field\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"delete_tag_template_field\", \"_inlets\": [], \"task_id\": \"delete_tag_template_field\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo delete_tag_template_field\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"delete_tag_template\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"delete_tag_template\", \"_inlets\": [], \"task_id\": \"delete_tag_template\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo delete_tag_template\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"delete_entry_group\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"get_entry_group\", \"_inlets\": [], \"task_id\": \"get_entry_group\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo get_entry_group\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"get_entry_group_result\", \"delete_entry_group\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"get_entry_group_result\", \"_inlets\": [], \"task_id\": \"get_entry_group_result\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo get_entry_group_result\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"get_entry\", \"_inlets\": [], \"task_id\": \"get_entry\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo get_entry\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"get_entry_result\", \"delete_entry\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"get_entry_result\", \"_inlets\": [], \"task_id\": \"get_entry_result\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo get_entry_result\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"get_tag_template\", \"_inlets\": [], \"task_id\": \"get_tag_template\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo get_tag_template\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"delete_tag_template\", \"get_tag_template_result\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"get_tag_template_result\", \"_inlets\": [], \"task_id\": \"get_tag_template_result\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo get_tag_template_result\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"list_tags\", \"_inlets\": [], \"task_id\": \"list_tags\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo list_tags\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"delete_tag\", \"list_tags_result\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"list_tags_result\", \"_inlets\": [], \"task_id\": \"list_tags_result\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo list_tags_result\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"lookup_entry\", \"_inlets\": [], \"task_id\": \"lookup_entry\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo lookup_entry\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"lookup_entry_result\", \"delete_entry\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"lookup_entry_result\", \"_inlets\": [], \"task_id\": \"lookup_entry_result\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo lookup_entry_result\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"rename_tag_template_field\", \"_inlets\": [], \"task_id\": \"rename_tag_template_field\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo rename_tag_template_field\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"delete_tag_template_field\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"search_catalog\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"search_catalog\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"delete_entry_group\", \"delete_tag_template\", \"delete_tag_template_field\", \"delete_tag\", \"search_catalog_result\", \"delete_entry\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"search_catalog_result\", \"_inlets\": [], \"task_id\": \"search_catalog_result\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo search_catalog_result\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"update_entry\", \"_inlets\": [], \"task_id\": \"update_entry\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo update_entry\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"delete_entry\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"update_tag\", \"_inlets\": [], \"task_id\": \"update_tag\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo update_tag\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"delete_tag\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"update_tag_template\", \"_inlets\": [], \"task_id\": \"update_tag_template\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo update_tag_template\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"delete_tag_template\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"update_tag_template_field\", \"_inlets\": [], \"task_id\": \"update_tag_template_field\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo update_tag_template_field\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"rename_tag_template_field\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}], \"_dag_id\": \"example_complex\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_complex.py\", \"timezone\": \"UTC\", \"start_date\": 1613520000, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"get_entry\": [\"operator\", \"get_entry\"], \"list_tags\": [\"operator\", \"list_tags\"], \"create_tag\": [\"operator\", \"create_tag\"], \"delete_tag\": [\"operator\", \"delete_tag\"], \"update_tag\": [\"operator\", \"update_tag\"], \"delete_entry\": [\"operator\", \"delete_entry\"], \"lookup_entry\": [\"operator\", \"lookup_entry\"], \"update_entry\": [\"operator\", \"update_entry\"], \"search_catalog\": [\"operator\", \"search_catalog\"], \"get_entry_group\": [\"operator\", \"get_entry_group\"], \"create_entry_gcs\": [\"operator\", \"create_entry_gcs\"], \"get_entry_result\": [\"operator\", \"get_entry_result\"], \"get_tag_template\": [\"operator\", \"get_tag_template\"], \"list_tags_result\": [\"operator\", \"list_tags_result\"], \"create_tag_result\": [\"operator\", \"create_tag_result\"], \"create_entry_group\": [\"operator\", \"create_entry_group\"], \"create_tag_result2\": [\"operator\", \"create_tag_result2\"], \"delete_entry_group\": [\"operator\", \"delete_entry_group\"], \"create_tag_template\": [\"operator\", \"create_tag_template\"], \"delete_tag_template\": [\"operator\", \"delete_tag_template\"], \"lookup_entry_result\": [\"operator\", \"lookup_entry_result\"], \"update_tag_template\": [\"operator\", \"update_tag_template\"], \"search_catalog_result\": [\"operator\", \"search_catalog_result\"], \"get_entry_group_result\": [\"operator\", \"get_entry_group_result\"], \"create_entry_gcs_result\": [\"operator\", \"create_entry_gcs_result\"], \"get_tag_template_result\": [\"operator\", \"get_tag_template_result\"], \"create_entry_gcs_result2\": [\"operator\", \"create_entry_gcs_result2\"], \"create_entry_group_result\": [\"operator\", \"create_entry_group_result\"], \"create_tag_template_field\": [\"operator\", \"create_tag_template_field\"], \"delete_tag_template_field\": [\"operator\", \"delete_tag_template_field\"], \"rename_tag_template_field\": [\"operator\", \"rename_tag_template_field\"], \"update_tag_template_field\": [\"operator\", \"update_tag_template_field\"], \"create_entry_group_result2\": [\"operator\", \"create_entry_group_result2\"], \"create_tag_template_result\": [\"operator\", \"create_tag_template_result\"], \"create_tag_template_result2\": [\"operator\", \"create_tag_template_result2\"], \"create_tag_template_field_result\": [\"operator\", \"create_tag_template_field_result\"], \"create_tag_template_field_result2\": [\"operator\", \"create_tag_template_field_result2\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"schedule_interval\": null}, \"__version\": 1}','2021-02-18 18:41:42.496116','670e34dc7318b460e966948277a5cf2b'),('example_dag_decorator','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_dag_decorator.py',38682307841905099,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"get_ip\", \"owner\": \"airflow\", \"params\": {\"email\": \"example@example.com\"}, \"_inlets\": [], \"task_id\": \"get_ip\", \"_outlets\": [], \"ui_color\": \"#fff\", \"_is_dummy\": false, \"_task_type\": \"GetRequestOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"unusual_prefix_b88486837b9a891bfa232d75896d5aa20251cbda_example_dag_decorator\", \"template_fields\": [], \"_downstream_task_ids\": [\"prepare_email\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"prepare_email\", \"owner\": \"airflow\", \"params\": {\"email\": \"example@example.com\"}, \"_inlets\": [], \"op_args\": \"(<airflow.models.xcom_arg.XComArg object at 0x7f832dac0ac8>,)\", \"task_id\": \"prepare_email\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"_PythonDecoratedOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"send_email\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\"}}, {\"to\": \"<airflow.models.dagparam.DagParam object at 0x7f832dac0ba8>\", \"pool\": \"default_pool\", \"files\": [], \"label\": \"send_email\", \"owner\": \"airflow\", \"params\": {\"email\": \"example@example.com\"}, \"_inlets\": [], \"subject\": \"{{ task_instance.xcom_pull(task_ids=\'prepare_email\', dag_id=\'example_dag_decorator\', key=\'subject\') }}\", \"task_id\": \"send_email\", \"_outlets\": [], \"ui_color\": \"#e6faf9\", \"_is_dummy\": false, \"_task_type\": \"EmailOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.email\", \"html_content\": \"{{ task_instance.xcom_pull(task_ids=\'prepare_email\', dag_id=\'example_dag_decorator\', key=\'body\') }}\", \"template_fields\": [\"to\", \"subject\", \"html_content\", \"files\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"html_content\": \"html\"}}], \"doc_md\": \"\\n    DAG to send server IP to email.\\n\\n    :param email: Email to send IP to. Defaults to example@example.com.\\n    :type email: str\\n    \", \"params\": {\"email\": \"example@example.com\"}, \"_dag_id\": \"example_dag_decorator\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_dag_decorator.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"get_ip\": [\"operator\", \"get_ip\"], \"send_email\": [\"operator\", \"send_email\"], \"prepare_email\": [\"operator\", \"prepare_email\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": null}, \"__version\": 1}','2021-02-18 18:41:42.328594','78b98ba49bd083bd174ff16a36bcead3'),('example_external_task_marker_child','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_external_task_marker_dag.py',48679579918738237,'{\"dag\": {\"tags\": [\"example2\"], \"tasks\": [{\"deps\": [\"airflow.ti_deps.deps.not_previously_skipped_dep.NotPreviouslySkippedDep\", \"airflow.ti_deps.deps.ready_to_reschedule.ReadyToRescheduleDep\", \"airflow.ti_deps.deps.prev_dagrun_dep.PrevDagrunDep\", \"airflow.ti_deps.deps.trigger_rule_dep.TriggerRuleDep\", \"airflow.ti_deps.deps.not_in_retry_period_dep.NotInRetryPeriodDep\"], \"pool\": \"default_pool\", \"label\": \"child_task1\", \"_inlets\": [], \"task_id\": \"child_task1\", \"_outlets\": [], \"ui_color\": \"#19647e\", \"_is_dummy\": false, \"_task_type\": \"ExternalTaskSensor\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.sensors.external_task\", \"external_dag_id\": \"example_external_task_marker_parent\", \"template_fields\": [\"external_dag_id\", \"external_task_id\"], \"external_task_id\": \"parent_task\", \"_downstream_task_ids\": [\"child_task2\"], \"_operator_extra_links\": [{\"airflow.sensors.external_task.ExternalTaskSensorLink\": {}}], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"child_task2\", \"_inlets\": [], \"task_id\": \"child_task2\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}], \"_dag_id\": \"example_external_task_marker_child\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_external_task_marker_dag.py\", \"timezone\": \"UTC\", \"start_date\": 1420070400, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"child_task1\": [\"operator\", \"child_task1\"], \"child_task2\": [\"operator\", \"child_task2\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"schedule_interval\": null}, \"__version\": 1}','2021-02-18 18:41:42.615778','8bd2dca4462b4e82c0458017c9828713'),('example_external_task_marker_parent','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_external_task_marker_dag.py',48679579918738237,'{\"dag\": {\"tags\": [\"example2\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"parent_task\", \"_inlets\": [], \"task_id\": \"parent_task\", \"_outlets\": [], \"ui_color\": \"#19647e\", \"_is_dummy\": true, \"_task_type\": \"ExternalTaskMarker\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.sensors.external_task\", \"execution_date\": \"{{ execution_date.isoformat() }}\", \"external_dag_id\": \"example_external_task_marker_child\", \"recursion_depth\": 10, \"template_fields\": [\"external_dag_id\", \"external_task_id\", \"execution_date\"], \"external_task_id\": \"child_task1\", \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}], \"_dag_id\": \"example_external_task_marker_parent\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_external_task_marker_dag.py\", \"timezone\": \"UTC\", \"start_date\": 1420070400, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"parent_task\": [\"operator\", \"parent_task\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"schedule_interval\": null}, \"__version\": 1}','2021-02-18 18:41:42.606302','386bb290a9e909b2fee4acfac445b9fd'),('example_kubernetes_executor','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_kubernetes_executor.py',62564788872744106,'{\"dag\": {\"tags\": [\"example\", \"example2\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"start_task\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"start_task\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"four_task\", \"three_task\", \"one_task\", \"two_task\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"one_task\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"one_task\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"executor_config\": {\"__var\": {\"KubernetesExecutor\": {\"__var\": {\"image\": \"airflow/ci:latest\"}, \"__type\": \"dict\"}}, \"__type\": \"dict\"}, \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"two_task\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"two_task\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"executor_config\": {\"__var\": {\"KubernetesExecutor\": {\"__var\": {\"image\": \"airflow/ci_zip:latest\"}, \"__type\": \"dict\"}}, \"__type\": \"dict\"}, \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"three_task\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"three_task\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"executor_config\": {\"__var\": {\"KubernetesExecutor\": {\"__var\": {\"affinity\": {\"__var\": {\"podAntiAffinity\": {\"__var\": {\"requiredDuringSchedulingIgnoredDuringExecution\": [{\"__var\": {\"topologyKey\": \"kubernetes.io/hostname\", \"labelSelector\": {\"__var\": {\"matchExpressions\": [{\"__var\": {\"key\": \"app\", \"values\": [\"airflow\"], \"operator\": \"In\"}, \"__type\": \"dict\"}]}, \"__type\": \"dict\"}}, \"__type\": \"dict\"}]}, \"__type\": \"dict\"}}, \"__type\": \"dict\"}, \"tolerations\": [{\"__var\": {\"key\": \"dedicated\", \"value\": \"airflow\", \"operator\": \"Equal\"}, \"__type\": \"dict\"}], \"limit_memory\": \"128Mi\", \"request_memory\": \"128Mi\"}, \"__type\": \"dict\"}}, \"__type\": \"dict\"}, \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"four_task\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"four_task\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"executor_config\": {\"__var\": {\"KubernetesExecutor\": {\"__var\": {\"labels\": {\"__var\": {\"foo\": \"bar\"}, \"__type\": \"dict\"}}, \"__type\": \"dict\"}}, \"__type\": \"dict\"}, \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}], \"_dag_id\": \"example_kubernetes_executor\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_kubernetes_executor.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"one_task\": [\"operator\", \"one_task\"], \"two_task\": [\"operator\", \"two_task\"], \"four_task\": [\"operator\", \"four_task\"], \"start_task\": [\"operator\", \"start_task\"], \"three_task\": [\"operator\", \"three_task\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": null}, \"__version\": 1}','2021-02-18 18:41:42.546434','e4ce3f037b61e42d48fa980eabe2333a'),('example_nested_branch_dag','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_nested_branch_dag.py',16017097700992221,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"branch_1\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"branch_1\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"BranchPythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"true_1\", \"false_1\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"join_1\", \"_inlets\": [], \"task_id\": \"join_1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"trigger_rule\": \"none_failed_or_skipped\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"true_1\", \"_inlets\": [], \"task_id\": \"true_1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"join_1\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"false_1\", \"_inlets\": [], \"task_id\": \"false_1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"branch_2\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"branch_2\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"branch_2\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"BranchPythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"false_2\", \"true_2\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"join_2\", \"_inlets\": [], \"task_id\": \"join_2\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"trigger_rule\": \"none_failed_or_skipped\", \"template_fields\": [], \"_downstream_task_ids\": [\"false_3\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"true_2\", \"_inlets\": [], \"task_id\": \"true_2\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"join_2\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"false_2\", \"_inlets\": [], \"task_id\": \"false_2\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"join_2\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"false_3\", \"_inlets\": [], \"task_id\": \"false_3\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"join_1\"], \"template_fields_renderers\": {}}], \"_dag_id\": \"example_nested_branch_dag\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_nested_branch_dag.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"join_1\": [\"operator\", \"join_1\"], \"join_2\": [\"operator\", \"join_2\"], \"true_1\": [\"operator\", \"true_1\"], \"true_2\": [\"operator\", \"true_2\"], \"false_1\": [\"operator\", \"false_1\"], \"false_2\": [\"operator\", \"false_2\"], \"false_3\": [\"operator\", \"false_3\"], \"branch_1\": [\"operator\", \"branch_1\"], \"branch_2\": [\"operator\", \"branch_2\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"schedule_interval\": \"@daily\"}, \"__version\": 1}','2021-02-18 18:41:42.479510','258c67414f39c477e1cc726606fd1b0b'),('example_passing_params_via_test_command','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_passing_params_via_test_command.py',10152734057239658,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"run_this\", \"owner\": \"airflow\", \"params\": {\"miff\": \"agg\"}, \"_inlets\": [], \"op_args\": [], \"task_id\": \"run_this\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"also_run_this\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"also_run_this\", \"owner\": \"airflow\", \"params\": {\"miff\": \"agg\"}, \"_inlets\": [], \"task_id\": \"also_run_this\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"\\n    echo \\\" \'foo was passed in via Airflow CLI Test command with value {{ params.foo }} \\\"\\n    echo \\\" \'miff was passed in via BashOperator with value {{ params.miff }} \\\"\\n\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"env_var_test_task\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"env_var_test_task\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}], \"_dag_id\": \"example_passing_params_via_test_command\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_passing_params_via_test_command.py\", \"timezone\": \"UTC\", \"start_date\": 1613520000, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"run_this\": [\"operator\", \"run_this\"], \"also_run_this\": [\"operator\", \"also_run_this\"], \"env_var_test_task\": [\"operator\", \"env_var_test_task\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"dagrun_timeout\": 240, \"schedule_interval\": \"*/1 * * * *\"}, \"__version\": 1}','2021-02-18 18:41:42.584992','f6aad2f436b3e7c6100915bba3585924'),('example_python_operator','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_python_operator.py',27058878837141509,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"print_the_context\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"print_the_context\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"sleep_for_0\", \"sleep_for_4\", \"sleep_for_2\", \"sleep_for_3\", \"sleep_for_1\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"sleep_for_0\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"sleep_for_0\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {\"random_base\": 0}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"sleep_for_1\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"sleep_for_1\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {\"random_base\": 0.1}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"sleep_for_2\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"sleep_for_2\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {\"random_base\": 0.2}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"sleep_for_3\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"sleep_for_3\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {\"random_base\": 0.3}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"sleep_for_4\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"sleep_for_4\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {\"random_base\": 0.4}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"virtualenv_python\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"virtualenv_python\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonVirtualenvOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}], \"_dag_id\": \"example_python_operator\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_python_operator.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"sleep_for_0\": [\"operator\", \"sleep_for_0\"], \"sleep_for_1\": [\"operator\", \"sleep_for_1\"], \"sleep_for_2\": [\"operator\", \"sleep_for_2\"], \"sleep_for_3\": [\"operator\", \"sleep_for_3\"], \"sleep_for_4\": [\"operator\", \"sleep_for_4\"], \"print_the_context\": [\"operator\", \"print_the_context\"], \"virtualenv_python\": [\"operator\", \"virtualenv_python\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": null}, \"__version\": 1}','2021-02-18 18:41:42.383421','90de4a17fd0781517f352aaec7fddf94'),('example_short_circuit_operator','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_short_circuit_operator.py',21898232508061619,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"condition_is_True\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"condition_is_True\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"ShortCircuitOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"true_1\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"condition_is_False\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"condition_is_False\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"ShortCircuitOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"false_1\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"true_1\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"true_1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"true_2\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"true_2\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"true_2\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"false_1\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"false_1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"false_2\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"false_2\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"false_2\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}], \"_dag_id\": \"example_short_circuit_operator\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_short_circuit_operator.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"true_1\": [\"operator\", \"true_1\"], \"true_2\": [\"operator\", \"true_2\"], \"false_1\": [\"operator\", \"false_1\"], \"false_2\": [\"operator\", \"false_2\"], \"condition_is_True\": [\"operator\", \"condition_is_True\"], \"condition_is_False\": [\"operator\", \"condition_is_False\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}}, \"__version\": 1}','2021-02-18 18:41:42.421666','a1e3d4492a0d58815806cc966bd4d616'),('example_skip_dag','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_skip_dag.py',36991529475418274,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"skip_operator_1\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"skip_operator_1\", \"_outlets\": [], \"ui_color\": \"#e8b7e4\", \"_is_dummy\": true, \"_task_type\": \"DummySkipOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"unusual_prefix_21337fd32a768557d83f43f9836b999e14a8a287_example_skip_dag\", \"template_fields\": [], \"_downstream_task_ids\": [\"all_success\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"always_true_1\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"always_true_1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"all_success\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"all_success\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"all_success\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"final_1\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"final_1\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"final_1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"skip_operator_2\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"skip_operator_2\", \"_outlets\": [], \"ui_color\": \"#e8b7e4\", \"_is_dummy\": true, \"_task_type\": \"DummySkipOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"unusual_prefix_21337fd32a768557d83f43f9836b999e14a8a287_example_skip_dag\", \"template_fields\": [], \"_downstream_task_ids\": [\"one_success\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"always_true_2\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"always_true_2\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"one_success\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"one_success\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"one_success\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"trigger_rule\": \"one_success\", \"template_fields\": [], \"_downstream_task_ids\": [\"final_2\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"final_2\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"final_2\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}], \"_dag_id\": \"example_skip_dag\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_skip_dag.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"final_1\": [\"operator\", \"final_1\"], \"final_2\": [\"operator\", \"final_2\"], \"all_success\": [\"operator\", \"all_success\"], \"one_success\": [\"operator\", \"one_success\"], \"always_true_1\": [\"operator\", \"always_true_1\"], \"always_true_2\": [\"operator\", \"always_true_2\"], \"skip_operator_1\": [\"operator\", \"skip_operator_1\"], \"skip_operator_2\": [\"operator\", \"skip_operator_2\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}}, \"__version\": 1}','2021-02-18 18:41:42.594773','2fb65f33b4b9fd01e2313e896270e5b1'),('example_subdag_operator','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_subdag_operator.py',46941702439313704,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"start\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"start\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"section-1\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"section-1\", \"owner\": \"airflow\", \"subdag\": {\"tasks\": [{\"pool\": \"default_pool\", \"label\": \"section-1-task-1\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"section-1-task-1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"section-1-task-2\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"section-1-task-2\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"section-1-task-3\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"section-1-task-3\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"section-1-task-4\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"section-1-task-4\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"section-1-task-5\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"section-1-task-5\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}], \"_dag_id\": \"example_subdag_operator.section-1\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/subdags/subdag.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"section-1-task-1\": [\"operator\", \"section-1-task-1\"], \"section-1-task-2\": [\"operator\", \"section-1-task-2\"], \"section-1-task-3\": [\"operator\", \"section-1-task-3\"], \"section-1-task-4\": [\"operator\", \"section-1-task-4\"], \"section-1-task-5\": [\"operator\", \"section-1-task-5\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": \"@daily\"}, \"_inlets\": [], \"task_id\": \"section-1\", \"_outlets\": [], \"ui_color\": \"#555\", \"_is_dummy\": false, \"_task_type\": \"SubDagOperator\", \"ui_fgcolor\": \"#fff\", \"_task_module\": \"airflow.operators.subdag\", \"template_fields\": [], \"_downstream_task_ids\": [\"some-other-task\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"some-other-task\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"some-other-task\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"section-2\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"section-2\", \"owner\": \"airflow\", \"subdag\": {\"tasks\": [{\"pool\": \"default_pool\", \"label\": \"section-2-task-1\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"section-2-task-1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"section-2-task-2\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"section-2-task-2\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"section-2-task-3\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"section-2-task-3\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"section-2-task-4\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"section-2-task-4\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"section-2-task-5\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"section-2-task-5\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}], \"_dag_id\": \"example_subdag_operator.section-2\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/subdags/subdag.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"section-2-task-1\": [\"operator\", \"section-2-task-1\"], \"section-2-task-2\": [\"operator\", \"section-2-task-2\"], \"section-2-task-3\": [\"operator\", \"section-2-task-3\"], \"section-2-task-4\": [\"operator\", \"section-2-task-4\"], \"section-2-task-5\": [\"operator\", \"section-2-task-5\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": \"@daily\"}, \"_inlets\": [], \"task_id\": \"section-2\", \"_outlets\": [], \"ui_color\": \"#555\", \"_is_dummy\": false, \"_task_type\": \"SubDagOperator\", \"ui_fgcolor\": \"#fff\", \"_task_module\": \"airflow.operators.subdag\", \"template_fields\": [], \"_downstream_task_ids\": [\"end\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"end\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"end\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}], \"_dag_id\": \"example_subdag_operator\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_subdag_operator.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"end\": [\"operator\", \"end\"], \"start\": [\"operator\", \"start\"], \"section-1\": [\"operator\", \"section-1\"], \"section-2\": [\"operator\", \"section-2\"], \"some-other-task\": [\"operator\", \"some-other-task\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": \"@once\"}, \"__version\": 1}','2021-02-18 18:41:42.460290','97ffb91ffb91d37c4d40a1b0ee121b31'),('example_task_group','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_task_group.py',68325907473709585,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"start\", \"_inlets\": [], \"task_id\": \"start\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"section_1.task_1\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"task_1\", \"_inlets\": [], \"task_id\": \"section_1.task_1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"section_1.task_3\", \"section_1.task_2\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"task_2\", \"_inlets\": [], \"task_id\": \"section_1.task_2\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo 1\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"section_2.task_1\", \"section_2.inner_section_2.task_2\", \"section_2.inner_section_2.task_3\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"task_3\", \"_inlets\": [], \"task_id\": \"section_1.task_3\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"section_2.task_1\", \"section_2.inner_section_2.task_2\", \"section_2.inner_section_2.task_3\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"task_1\", \"_inlets\": [], \"task_id\": \"section_2.task_1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"end\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"task_2\", \"_inlets\": [], \"task_id\": \"section_2.inner_section_2.task_2\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo 1\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"section_2.inner_section_2.task_4\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"task_3\", \"_inlets\": [], \"task_id\": \"section_2.inner_section_2.task_3\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"section_2.inner_section_2.task_4\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"task_4\", \"_inlets\": [], \"task_id\": \"section_2.inner_section_2.task_4\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"end\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"end\", \"_inlets\": [], \"task_id\": \"end\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}], \"_dag_id\": \"example_task_group\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_task_group.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"end\": [\"operator\", \"end\"], \"start\": [\"operator\", \"start\"], \"section_1\": [\"taskgroup\", {\"tooltip\": \"Tasks for section_1\", \"children\": {\"section_1.task_1\": [\"operator\", \"section_1.task_1\"], \"section_1.task_2\": [\"operator\", \"section_1.task_2\"], \"section_1.task_3\": [\"operator\", \"section_1.task_3\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": \"section_1\", \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [\"start\"], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": [\"section_2\"]}], \"section_2\": [\"taskgroup\", {\"tooltip\": \"Tasks for section_2\", \"children\": {\"section_2.task_1\": [\"operator\", \"section_2.task_1\"], \"section_2.inner_section_2\": [\"taskgroup\", {\"tooltip\": \"Tasks for inner_section2\", \"children\": {\"section_2.inner_section_2.task_2\": [\"operator\", \"section_2.inner_section_2.task_2\"], \"section_2.inner_section_2.task_3\": [\"operator\", \"section_2.inner_section_2.task_3\"], \"section_2.inner_section_2.task_4\": [\"operator\", \"section_2.inner_section_2.task_4\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": \"inner_section_2\", \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": \"section_2\", \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [\"section_1.task_3\", \"section_1.task_2\"], \"upstream_group_ids\": [\"section_1\"], \"downstream_task_ids\": [\"end\"], \"downstream_group_ids\": []}]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}}, \"__version\": 1}','2021-02-18 18:41:42.397814','26f9186cda6d1991d4b8d2ae7223f25a'),('example_trigger_controller_dag','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_trigger_controller_dag.py',21650908380821859,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"conf\": {\"message\": \"Hello World\"}, \"pool\": \"default_pool\", \"label\": \"test_trigger_dagrun\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"test_trigger_dagrun\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"_task_type\": \"TriggerDagRunOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.trigger_dagrun\", \"trigger_dag_id\": \"example_trigger_target_dag\", \"template_fields\": [\"trigger_dag_id\", \"execution_date\", \"conf\"], \"_downstream_task_ids\": [], \"_operator_extra_links\": [{\"airflow.operators.trigger_dagrun.TriggerDagRunLink\": {}}], \"template_fields_renderers\": {}}], \"_dag_id\": \"example_trigger_controller_dag\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_trigger_controller_dag.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"test_trigger_dagrun\": [\"operator\", \"test_trigger_dagrun\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": \"@once\"}, \"__version\": 1}','2021-02-18 18:41:42.373558','bf4a3bbd6a10172b9c429a7e5ee29918'),('example_trigger_target_dag','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_trigger_target_dag.py',1654745493949208,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"run_this\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"run_this\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"env\": {\"message\": \"{{ dag_run.conf[\\\"message\\\"] if dag_run else \\\"\\\" }}\"}, \"pool\": \"default_pool\", \"label\": \"bash_task\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"bash_task\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo \\\"Here is the message: $message\\\"\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}], \"_dag_id\": \"example_trigger_target_dag\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_trigger_target_dag.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"run_this\": [\"operator\", \"run_this\"], \"bash_task\": [\"operator\", \"bash_task\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": null}, \"__version\": 1}','2021-02-18 18:41:42.532555','9306af54286f98cf31560e0bcc44f582'),('example_xcom','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_xcom.py',7648444505613723,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"push\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"push\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"puller\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"push_by_returning\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"push_by_returning\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"puller\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"puller\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"puller\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}], \"_dag_id\": \"example_xcom\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_xcom.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"push\": [\"operator\", \"push\"], \"puller\": [\"operator\", \"puller\"], \"push_by_returning\": [\"operator\", \"push_by_returning\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": \"@once\"}, \"__version\": 1}','2021-02-18 18:41:42.340679','b254dd0ebbb5252cff81d48e497705e0'),('example_xcom_args','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_xcomargs.py',4058184967514074,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"generate_value\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"generate_value\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"print_value\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"print_value\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": \"(<airflow.models.xcom_arg.XComArg object at 0x7f832dad9dd8>,)\", \"task_id\": \"print_value\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"_PythonDecoratedOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\"}}], \"_dag_id\": \"example_xcom_args\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_xcomargs.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"print_value\": [\"operator\", \"print_value\"], \"generate_value\": [\"operator\", \"generate_value\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": null}, \"__version\": 1}','2021-02-18 18:41:42.505571','7b27dcca5795586bed0d931ff6626fe1'),('example_xcom_args_with_operators','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_xcomargs.py',4058184967514074,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"c\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"c\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo c\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [\"print_value\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"d\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"d\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"echo c\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"label\": \"print_value\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [\"first!\"], \"task_id\": \"print_value\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"_PythonDecoratedOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"print_value__1\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\"}}, {\"pool\": \"default_pool\", \"label\": \"print_value__1\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [\"second!\"], \"task_id\": \"print_value__1\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"_PythonDecoratedOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"d\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\"}}], \"_dag_id\": \"example_xcom_args_with_operators\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_xcomargs.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"c\": [\"operator\", \"c\"], \"d\": [\"operator\", \"d\"], \"print_value\": [\"operator\", \"print_value\"], \"print_value__1\": [\"operator\", \"print_value__1\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": null}, \"__version\": 1}','2021-02-18 18:41:42.515397','97db64973adaf1f0c8a8a5cf0f99893b'),('latest_only','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_latest_only.py',58752526798574026,'{\"dag\": {\"tags\": [\"example2\", \"example3\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"latest_only\", \"_inlets\": [], \"task_id\": \"latest_only\", \"_outlets\": [], \"ui_color\": \"#e9ffdb\", \"_is_dummy\": false, \"_task_type\": \"LatestOnlyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.latest_only\", \"template_fields\": [], \"_downstream_task_ids\": [\"task1\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"task1\", \"_inlets\": [], \"task_id\": \"task1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}], \"_dag_id\": \"latest_only\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_latest_only.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"task1\": [\"operator\", \"task1\"], \"latest_only\": [\"operator\", \"latest_only\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"schedule_interval\": {\"__var\": 14400, \"__type\": \"timedelta\"}}, \"__version\": 1}','2021-02-18 18:41:42.349897','62eac9fb5de40f8119895ff67aff44e4'),('latest_only_with_trigger','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_latest_only_with_trigger.py',39108862050874828,'{\"dag\": {\"tags\": [\"example3\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"latest_only\", \"_inlets\": [], \"task_id\": \"latest_only\", \"_outlets\": [], \"ui_color\": \"#e9ffdb\", \"_is_dummy\": false, \"_task_type\": \"LatestOnlyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.latest_only\", \"template_fields\": [], \"_downstream_task_ids\": [\"task1\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"task1\", \"_inlets\": [], \"task_id\": \"task1\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"task4\", \"task3\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"task2\", \"_inlets\": [], \"task_id\": \"task2\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [\"task4\", \"task3\"], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"task3\", \"_inlets\": [], \"task_id\": \"task3\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}, {\"pool\": \"default_pool\", \"label\": \"task4\", \"_inlets\": [], \"task_id\": \"task4\", \"_outlets\": [], \"ui_color\": \"#e8f7e4\", \"_is_dummy\": true, \"_task_type\": \"DummyOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.dummy\", \"trigger_rule\": \"all_done\", \"template_fields\": [], \"_downstream_task_ids\": [], \"template_fields_renderers\": {}}], \"_dag_id\": \"latest_only_with_trigger\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/example_latest_only_with_trigger.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"task1\": [\"operator\", \"task1\"], \"task2\": [\"operator\", \"task2\"], \"task3\": [\"operator\", \"task3\"], \"task4\": [\"operator\", \"task4\"], \"latest_only\": [\"operator\", \"latest_only\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"schedule_interval\": {\"__var\": 14400, \"__type\": \"timedelta\"}}, \"__version\": 1}','2021-02-18 18:41:42.447703','3c6eeb569cba8e7c2fbbb46a2fc53d4b'),('test_utils','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/test_utils.py',55646239417546062,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"sleeps_forever\", \"owner\": \"airflow\", \"_inlets\": [], \"task_id\": \"sleeps_forever\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"start_date\": 1613433600, \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"sleep 10000000000\", \"template_fields\": [\"bash_command\", \"env\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}], \"_dag_id\": \"test_utils\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/test_utils.py\", \"timezone\": \"UTC\", \"_task_group\": {\"tooltip\": \"\", \"children\": {\"sleeps_forever\": [\"operator\", \"sleeps_forever\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"schedule_interval\": null}, \"__version\": 1}','2021-02-18 18:41:42.469718','bc58905b036bd980387f8366c30861fb'),('tutorial','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/tutorial.py',35135952944146910,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"email\": [\"airflow@example.com\"], \"label\": \"print_date\", \"owner\": \"airflow\", \"_inlets\": [], \"retries\": 1, \"task_id\": \"print_date\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"retry_delay\": 300, \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"date\", \"email_on_retry\": false, \"template_fields\": [\"bash_command\", \"env\"], \"email_on_failure\": false, \"_downstream_task_ids\": [\"sleep\", \"templated\"], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"email\": [\"airflow@example.com\"], \"label\": \"sleep\", \"owner\": \"airflow\", \"_inlets\": [], \"retries\": 3, \"task_id\": \"sleep\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"retry_delay\": 300, \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"sleep 5\", \"email_on_retry\": false, \"template_fields\": [\"bash_command\", \"env\"], \"email_on_failure\": false, \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}, {\"pool\": \"default_pool\", \"email\": [\"airflow@example.com\"], \"label\": \"templated\", \"owner\": \"airflow\", \"params\": {\"my_param\": \"Parameter I passed in\"}, \"_inlets\": [], \"retries\": 1, \"task_id\": \"templated\", \"_outlets\": [], \"ui_color\": \"#f0ede4\", \"_is_dummy\": false, \"_task_type\": \"BashOperator\", \"ui_fgcolor\": \"#000\", \"retry_delay\": 300, \"_task_module\": \"airflow.operators.bash\", \"bash_command\": \"\\n{% for i in range(5) %}\\n    echo \\\"{{ ds }}\\\"\\n    echo \\\"{{ macros.ds_add(ds, 7)}}\\\"\\n    echo \\\"{{ params.my_param }}\\\"\\n{% endfor %}\\n\", \"email_on_retry\": false, \"template_fields\": [\"bash_command\", \"env\"], \"email_on_failure\": false, \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"env\": \"json\", \"bash_command\": \"bash\"}}], \"doc_md\": \"\\n### Tutorial Documentation\\nDocumentation that goes along with the Airflow tutorial located\\n[here](https://airflow.apache.org/tutorial.html)\\n\", \"_dag_id\": \"tutorial\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/tutorial.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"sleep\": [\"operator\", \"sleep\"], \"templated\": [\"operator\", \"templated\"], \"print_date\": [\"operator\", \"print_date\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"_description\": \"A simple tutorial DAG\", \"default_args\": {\"__var\": {\"email\": [\"airflow@example.com\"], \"owner\": \"airflow\", \"retries\": 1, \"retry_delay\": {\"__var\": 300, \"__type\": \"timedelta\"}, \"email_on_retry\": false, \"depends_on_past\": false, \"email_on_failure\": false}, \"__type\": \"dict\"}, \"schedule_interval\": {\"__var\": 86400, \"__type\": \"timedelta\"}}, \"__version\": 1}','2021-02-18 18:41:42.571799','28eaf5ede2b073b894a3d6d8622963e7'),('tutorial_etl_dag','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/tutorial_etl_dag.py',11738610760434725,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"extract\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"extract\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"transform\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"transform\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"transform\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"load\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}, {\"pool\": \"default_pool\", \"label\": \"load\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"load\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"PythonOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"templates_dict\", \"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\", \"templates_dict\": \"json\"}}], \"doc_md\": \"\\n### ETL DAG Tutorial Documentation\\nThis ETL DAG is compatible with Airflow 1.10.x (specifically tested with 1.10.12) and is referenced\\nas part of the documentation that goes along with the Airflow Functional DAG tutorial located\\n[here](https://airflow.apache.org/tutorial_decorated_flows.html)\\n\", \"_dag_id\": \"tutorial_etl_dag\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/tutorial_etl_dag.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"load\": [\"operator\", \"load\"], \"extract\": [\"operator\", \"extract\"], \"transform\": [\"operator\", \"transform\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"_description\": \"ETL DAG tutorial\", \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": null}, \"__version\": 1}','2021-02-18 18:41:42.406859','7048286d8eead00940b92f56b60d2d9b'),('tutorial_taskflow_api_etl','/usr/local/lib/python3.7/dist-packages/airflow/example_dags/tutorial_taskflow_api_etl.py',18235940001873911,'{\"dag\": {\"tags\": [\"example\"], \"tasks\": [{\"pool\": \"default_pool\", \"label\": \"extract\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": [], \"task_id\": \"extract\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"_PythonDecoratedOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"transform\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\"}}, {\"pool\": \"default_pool\", \"label\": \"transform\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": \"(<airflow.models.xcom_arg.XComArg object at 0x7f832dad0fd0>,)\", \"task_id\": \"transform\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"_PythonDecoratedOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [\"load\"], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\"}}, {\"pool\": \"default_pool\", \"label\": \"load\", \"owner\": \"airflow\", \"_inlets\": [], \"op_args\": \"(<airflow.models.xcom_arg.XComArg object at 0x7f832dad0d30>,)\", \"task_id\": \"load\", \"_outlets\": [], \"ui_color\": \"#ffefeb\", \"_is_dummy\": false, \"op_kwargs\": {}, \"_task_type\": \"_PythonDecoratedOperator\", \"ui_fgcolor\": \"#000\", \"_task_module\": \"airflow.operators.python\", \"template_fields\": [\"op_args\", \"op_kwargs\"], \"_downstream_task_ids\": [], \"template_fields_renderers\": {\"op_args\": \"py\", \"op_kwargs\": \"py\"}}], \"doc_md\": \"\\n    ### TaskFlow API Tutorial Documentation\\n    This is a simple ETL data pipeline example which demonstrates the use of\\n    the TaskFlow API using three simple tasks for Extract, Transform, and Load.\\n    Documentation that goes along with the Airflow TaskFlow API tutorial is\\n    located\\n    [here](https://airflow.apache.org/docs/stable/tutorial_taskflow_api.html)\\n    \", \"_dag_id\": \"tutorial_taskflow_api_etl\", \"fileloc\": \"/usr/local/lib/python3.7/dist-packages/airflow/example_dags/tutorial_taskflow_api_etl.py\", \"timezone\": \"UTC\", \"start_date\": 1613433600, \"_task_group\": {\"tooltip\": \"\", \"children\": {\"load\": [\"operator\", \"load\"], \"extract\": [\"operator\", \"extract\"], \"transform\": [\"operator\", \"transform\"]}, \"ui_color\": \"CornflowerBlue\", \"_group_id\": null, \"ui_fgcolor\": \"#000\", \"prefix_group_id\": true, \"upstream_task_ids\": [], \"upstream_group_ids\": [], \"downstream_task_ids\": [], \"downstream_group_ids\": []}, \"default_args\": {\"__var\": {\"owner\": \"airflow\"}, \"__type\": \"dict\"}, \"schedule_interval\": null}, \"__version\": 1}','2021-02-18 18:41:42.559986','e3586751933308866cbc3d35d375cbd3');
/*!40000 ALTER TABLE `serialized_dag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sla_miss`
--

DROP TABLE IF EXISTS `sla_miss`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sla_miss` (
  `task_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `dag_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `execution_date` timestamp(6) NOT NULL,
  `email_sent` tinyint(1) DEFAULT NULL,
  `timestamp` timestamp(6) NULL DEFAULT NULL,
  `description` text COLLATE utf8_unicode_ci,
  `notification_sent` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`task_id`,`dag_id`,`execution_date`),
  KEY `sm_dag` (`dag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sla_miss`
--

LOCK TABLES `sla_miss` WRITE;
/*!40000 ALTER TABLE `sla_miss` DISABLE KEYS */;
/*!40000 ALTER TABLE `sla_miss` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `slot_pool`
--

DROP TABLE IF EXISTS `slot_pool`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `slot_pool` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pool` varchar(256) COLLATE utf8_unicode_ci DEFAULT NULL,
  `slots` int(11) DEFAULT NULL,
  `description` text COLLATE utf8_unicode_ci,
  PRIMARY KEY (`id`),
  UNIQUE KEY `pool` (`pool`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `slot_pool`
--

LOCK TABLES `slot_pool` WRITE;
/*!40000 ALTER TABLE `slot_pool` DISABLE KEYS */;
INSERT INTO `slot_pool` VALUES (1,'default_pool',128,'Default pool');
/*!40000 ALTER TABLE `slot_pool` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `task_fail`
--

DROP TABLE IF EXISTS `task_fail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `task_fail` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `task_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `dag_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `execution_date` timestamp(6) NOT NULL,
  `start_date` timestamp(6) NULL DEFAULT NULL,
  `end_date` timestamp(6) NULL DEFAULT NULL,
  `duration` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_task_fail_dag_task_date` (`dag_id`,`task_id`,`execution_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `task_fail`
--

LOCK TABLES `task_fail` WRITE;
/*!40000 ALTER TABLE `task_fail` DISABLE KEYS */;
/*!40000 ALTER TABLE `task_fail` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `task_instance`
--

DROP TABLE IF EXISTS `task_instance`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `task_instance` (
  `task_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `dag_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `execution_date` timestamp(6) NOT NULL,
  `start_date` timestamp(6) NULL DEFAULT NULL,
  `end_date` timestamp(6) NULL DEFAULT NULL,
  `duration` float DEFAULT NULL,
  `state` varchar(20) COLLATE utf8_unicode_ci DEFAULT NULL,
  `try_number` int(11) DEFAULT NULL,
  `hostname` varchar(1000) COLLATE utf8_unicode_ci DEFAULT NULL,
  `unixname` varchar(1000) COLLATE utf8_unicode_ci DEFAULT NULL,
  `job_id` int(11) DEFAULT NULL,
  `pool` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `queue` varchar(256) COLLATE utf8_unicode_ci DEFAULT NULL,
  `priority_weight` int(11) DEFAULT NULL,
  `operator` varchar(1000) COLLATE utf8_unicode_ci DEFAULT NULL,
  `queued_dttm` timestamp(6) NULL DEFAULT NULL,
  `pid` int(11) DEFAULT NULL,
  `max_tries` int(11) DEFAULT '-1',
  `executor_config` blob,
  `pool_slots` int(11) DEFAULT NULL,
  `queued_by_job_id` int(11) DEFAULT NULL,
  `external_executor_id` varchar(250) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`task_id`,`dag_id`,`execution_date`),
  KEY `ti_dag_state` (`dag_id`,`state`),
  KEY `ti_pool` (`pool`,`state`,`priority_weight`),
  KEY `ti_state_lkp` (`dag_id`,`task_id`,`execution_date`,`state`),
  KEY `ti_state` (`state`),
  KEY `ti_job_id` (`job_id`),
  KEY `ti_dag_date` (`dag_id`,`execution_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `task_instance`
--

LOCK TABLES `task_instance` WRITE;
/*!40000 ALTER TABLE `task_instance` DISABLE KEYS */;
/*!40000 ALTER TABLE `task_instance` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `task_reschedule`
--

DROP TABLE IF EXISTS `task_reschedule`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `task_reschedule` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `task_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `dag_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `execution_date` timestamp(6) NOT NULL,
  `try_number` int(11) NOT NULL,
  `start_date` timestamp(6) NOT NULL,
  `end_date` timestamp(6) NOT NULL,
  `duration` int(11) NOT NULL,
  `reschedule_date` timestamp(6) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `idx_task_reschedule_dag_task_date` (`dag_id`,`task_id`,`execution_date`),
  KEY `task_reschedule_dag_task_date_fkey` (`task_id`,`dag_id`,`execution_date`),
  CONSTRAINT `task_reschedule_dag_task_date_fkey` FOREIGN KEY (`task_id`, `dag_id`, `execution_date`) REFERENCES `task_instance` (`task_id`, `dag_id`, `execution_date`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `task_reschedule`
--

LOCK TABLES `task_reschedule` WRITE;
/*!40000 ALTER TABLE `task_reschedule` DISABLE KEYS */;
/*!40000 ALTER TABLE `task_reschedule` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `variable`
--

DROP TABLE IF EXISTS `variable`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `variable` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `key` varchar(250) COLLATE utf8_unicode_ci DEFAULT NULL,
  `val` mediumtext COLLATE utf8_unicode_ci,
  `is_encrypted` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `key` (`key`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `variable`
--

LOCK TABLES `variable` WRITE;
/*!40000 ALTER TABLE `variable` DISABLE KEYS */;
/*!40000 ALTER TABLE `variable` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `xcom`
--

DROP TABLE IF EXISTS `xcom`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `xcom` (
  `key` varchar(512) COLLATE utf8_unicode_ci NOT NULL,
  `value` blob,
  `timestamp` timestamp(6) NOT NULL,
  `execution_date` timestamp(6) NOT NULL,
  `task_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `dag_id` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`dag_id`,`task_id`,`key`,`execution_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `xcom`
--

LOCK TABLES `xcom` WRITE;
/*!40000 ALTER TABLE `xcom` DISABLE KEYS */;
/*!40000 ALTER TABLE `xcom` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-02-18 18:44:21
